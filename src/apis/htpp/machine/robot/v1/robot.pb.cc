// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/htpp/machine/robot/v1/robot.proto

#include "apis/htpp/machine/robot/v1/robot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace htpp {
namespace machine {
namespace robot {
namespace v1 {
PROTOBUF_CONSTEXPR CoordinateRequest::CoordinateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.check_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.rx_)*/0
  , /*decltype(_impl_.ry_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.check_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinateRequestDefaultTypeInternal() {}
  union {
    CoordinateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinateRequestDefaultTypeInternal _CoordinateRequest_default_instance_;
PROTOBUF_CONSTEXPR CoordinateReply::CoordinateReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinateReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinateReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinateReplyDefaultTypeInternal() {}
  union {
    CoordinateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinateReplyDefaultTypeInternal _CoordinateReply_default_instance_;
PROTOBUF_CONSTEXPR ZeroRequest::ZeroRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZeroRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZeroRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZeroRequestDefaultTypeInternal() {}
  union {
    ZeroRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
PROTOBUF_CONSTEXPR ZeroReply::ZeroReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZeroReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZeroReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZeroReplyDefaultTypeInternal() {}
  union {
    ZeroReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
PROTOBUF_CONSTEXPR MotorStatus::MotorStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fault_)*/false
  , /*decltype(_impl_.enabling_)*/false
  , /*decltype(_impl_.running_)*/false
  , /*decltype(_impl_.instruction_completion_)*/false
  , /*decltype(_impl_.path_completion_)*/false
  , /*decltype(_impl_.zero_completion_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotorStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorStatusDefaultTypeInternal() {}
  union {
    MotorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
PROTOBUF_CONSTEXPR MotorInfo::MotorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motor_status_)*/nullptr
  , /*decltype(_impl_.instr_pos_)*/int64_t{0}
  , /*decltype(_impl_.current_pos_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorInfoDefaultTypeInternal() {}
  union {
    MotorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
PROTOBUF_CONSTEXPR MotorInfoRequest::MotorInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotorInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorInfoRequestDefaultTypeInternal() {}
  union {
    MotorInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorInfoRequestDefaultTypeInternal _MotorInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR MotorInfoReply::MotorInfoReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motor_info_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MotorInfoReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotorInfoReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotorInfoReplyDefaultTypeInternal() {}
  union {
    MotorInfoReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotorInfoReplyDefaultTypeInternal _MotorInfoReply_default_instance_;
}  // namespace v1
}  // namespace robot
}  // namespace machine
}  // namespace htpp
static ::_pb::Metadata file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto = nullptr;

const uint32_t TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.ry_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.check_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateRequest, _impl_.check_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::CoordinateReply, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::ZeroRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::ZeroRequest, _impl_.uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::ZeroReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::ZeroReply, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.fault_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.enabling_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.running_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.instruction_completion_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.path_completion_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorStatus, _impl_.zero_completion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfo, _impl_.motor_status_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfo, _impl_.instr_pos_),
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfo, _impl_.current_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfoRequest, _impl_.uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::machine::robot::v1::MotorInfoReply, _impl_.motor_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::htpp::machine::robot::v1::CoordinateRequest)},
  { 15, -1, -1, sizeof(::htpp::machine::robot::v1::CoordinateReply)},
  { 22, -1, -1, sizeof(::htpp::machine::robot::v1::ZeroRequest)},
  { 29, -1, -1, sizeof(::htpp::machine::robot::v1::ZeroReply)},
  { 36, -1, -1, sizeof(::htpp::machine::robot::v1::MotorStatus)},
  { 48, -1, -1, sizeof(::htpp::machine::robot::v1::MotorInfo)},
  { 57, -1, -1, sizeof(::htpp::machine::robot::v1::MotorInfoRequest)},
  { 64, -1, -1, sizeof(::htpp::machine::robot::v1::MotorInfoReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::htpp::machine::robot::v1::_CoordinateRequest_default_instance_._instance,
  &::htpp::machine::robot::v1::_CoordinateReply_default_instance_._instance,
  &::htpp::machine::robot::v1::_ZeroRequest_default_instance_._instance,
  &::htpp::machine::robot::v1::_ZeroReply_default_instance_._instance,
  &::htpp::machine::robot::v1::_MotorStatus_default_instance_._instance,
  &::htpp::machine::robot::v1::_MotorInfo_default_instance_._instance,
  &::htpp::machine::robot::v1::_MotorInfoRequest_default_instance_._instance,
  &::htpp::machine::robot::v1::_MotorInfoReply_default_instance_._instance,
};

const char descriptor_table_protodef_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&apis/htpp/machine/robot/v1/robot.proto"
  "\022\025htpp.machine.robot.v1\"\274\001\n\021CoordinateRe"
  "quest\022\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\022\014\n\001z\030\003"
  " \001(\001R\001z\022\016\n\002rx\030\004 \001(\001R\002rx\022\016\n\002ry\030\005 \001(\001R\002ry\022"
  "\024\n\005check\030\006 \001(\010R\005check\022\024\n\005delay\030\007 \001(\001R\005de"
  "lay\022\022\n\004uuid\030\010 \001(\tR\004uuid\022\035\n\ncheck_name\030\t "
  "\001(\tR\tcheckName\")\n\017CoordinateReply\022\026\n\006sta"
  "tus\030\001 \001(\010R\006status\"!\n\013ZeroRequest\022\022\n\004uuid"
  "\030\010 \001(\tR\004uuid\"#\n\tZeroReply\022\026\n\006status\030\001 \001("
  "\010R\006status\"\342\001\n\013MotorStatus\022\024\n\005fault\030\001 \001(\010"
  "R\005fault\022\032\n\010enabling\030\002 \001(\010R\010enabling\022\030\n\007r"
  "unning\030\003 \001(\010R\007running\0225\n\026instruction_com"
  "pletion\030\004 \001(\010R\025instructionCompletion\022\'\n\017"
  "path_completion\030\005 \001(\010R\016pathCompletion\022\'\n"
  "\017zero_completion\030\006 \001(\010R\016zeroCompletion\"\220"
  "\001\n\tMotorInfo\022E\n\014motor_status\030\001 \001(\0132\".htp"
  "p.machine.robot.v1.MotorStatusR\013motorSta"
  "tus\022\033\n\tinstr_pos\030\002 \001(\003R\010instrPos\022\037\n\013curr"
  "ent_pos\030\003 \001(\003R\ncurrentPos\"&\n\020MotorInfoRe"
  "quest\022\022\n\004uuid\030\010 \001(\tR\004uuid\"Q\n\016MotorInfoRe"
  "ply\022\?\n\nmotor_info\030\001 \003(\0132 .htpp.machine.r"
  "obot.v1.MotorInfoR\tmotorInfo2\243\002\n\005Robot\022f"
  "\n\020AppendCoordinate\022(.htpp.machine.robot."
  "v1.CoordinateRequest\032&.htpp.machine.robo"
  "t.v1.CoordinateReply\"\000\022N\n\004Zero\022\".htpp.ma"
  "chine.robot.v1.ZeroRequest\032 .htpp.machin"
  "e.robot.v1.ZeroReply\"\000\022b\n\016GetMotorStatus"
  "\022\'.htpp.machine.robot.v1.MotorInfoReques"
  "t\032%.htpp.machine.robot.v1.MotorInfoReply"
  "\"\000B\034P\001Z\030htpp/machine/robot/v1;v1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto = {
    false, false, 1200, descriptor_table_protodef_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto,
    "apis/htpp/machine/robot/v1/robot.proto",
    &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto::offsets,
    file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto, file_level_enum_descriptors_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto,
    file_level_service_descriptors_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter() {
  return &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto(&descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto);
namespace htpp {
namespace machine {
namespace robot {
namespace v1 {

// ===================================================================

class CoordinateRequest::_Internal {
 public:
};

CoordinateRequest::CoordinateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.CoordinateRequest)
}
CoordinateRequest::CoordinateRequest(const CoordinateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.check_name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ry_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.check_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.check_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_name().empty()) {
    _this->_impl_.check_name_.Set(from._internal_check_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.check_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.check_));
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.CoordinateRequest)
}

inline void CoordinateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.check_name_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.rx_){0}
    , decltype(_impl_.ry_){0}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.check_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.check_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinateRequest::~CoordinateRequest() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.CoordinateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.check_name_.Destroy();
}

void CoordinateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.CoordinateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.check_name_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.check_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4 [json_name = "rx"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5 [json_name = "ry"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool check = 6 [json_name = "check"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double delay = 7 [json_name = "delay"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string uuid = 8 [json_name = "uuid"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.machine.robot.v1.CoordinateRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string check_name = 9 [json_name = "checkName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.machine.robot.v1.CoordinateRequest.check_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.CoordinateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double rx = 4 [json_name = "rx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5 [json_name = "ry"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // bool check = 6 [json_name = "check"];
  if (this->_internal_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_check(), target);
  }

  // double delay = 7 [json_name = "delay"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_delay(), target);
  }

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.machine.robot.v1.CoordinateRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_uuid(), target);
  }

  // string check_name = 9 [json_name = "checkName"];
  if (!this->_internal_check_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_name().data(), static_cast<int>(this->_internal_check_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.machine.robot.v1.CoordinateRequest.check_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.CoordinateRequest)
  return target;
}

size_t CoordinateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.CoordinateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string check_name = 9 [json_name = "checkName"];
  if (!this->_internal_check_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_name());
  }

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4 [json_name = "rx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5 [json_name = "ry"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double delay = 7 [json_name = "delay"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = this->_internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    total_size += 1 + 8;
  }

  // bool check = 6 [json_name = "check"];
  if (this->_internal_check() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinateRequest::GetClassData() const { return &_class_data_; }


void CoordinateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinateRequest*>(&to_msg);
  auto& from = static_cast<const CoordinateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.CoordinateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_check_name().empty()) {
    _this->_internal_set_check_name(from._internal_check_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _this->_internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_delay = from._internal_delay();
  uint64_t raw_delay;
  memcpy(&raw_delay, &tmp_delay, sizeof(tmp_delay));
  if (raw_delay != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_check() != 0) {
    _this->_internal_set_check(from._internal_check());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinateRequest::CopyFrom(const CoordinateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.CoordinateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateRequest::IsInitialized() const {
  return true;
}

void CoordinateRequest::InternalSwap(CoordinateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.check_name_, lhs_arena,
      &other->_impl_.check_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordinateRequest, _impl_.check_)
      + sizeof(CoordinateRequest::_impl_.check_)
      - PROTOBUF_FIELD_OFFSET(CoordinateRequest, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[0]);
}

// ===================================================================

class CoordinateReply::_Internal {
 public:
};

CoordinateReply::CoordinateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.CoordinateReply)
}
CoordinateReply::CoordinateReply(const CoordinateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinateReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.CoordinateReply)
}

inline void CoordinateReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoordinateReply::~CoordinateReply() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.CoordinateReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoordinateReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.CoordinateReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinateReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinateReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.CoordinateReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.CoordinateReply)
  return target;
}

size_t CoordinateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.CoordinateReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinateReply::GetClassData() const { return &_class_data_; }


void CoordinateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinateReply*>(&to_msg);
  auto& from = static_cast<const CoordinateReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.CoordinateReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinateReply::CopyFrom(const CoordinateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.CoordinateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinateReply::IsInitialized() const {
  return true;
}

void CoordinateReply::InternalSwap(CoordinateReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinateReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[1]);
}

// ===================================================================

class ZeroRequest::_Internal {
 public:
};

ZeroRequest::ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.ZeroRequest)
}
ZeroRequest::ZeroRequest(const ZeroRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZeroRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.ZeroRequest)
}

inline void ZeroRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ZeroRequest::~ZeroRequest() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.ZeroRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZeroRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
}

void ZeroRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZeroRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 8 [json_name = "uuid"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.machine.robot.v1.ZeroRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.ZeroRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.machine.robot.v1.ZeroRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.ZeroRequest)
  return target;
}

size_t ZeroRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.ZeroRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZeroRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroRequest::GetClassData() const { return &_class_data_; }


void ZeroRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZeroRequest*>(&to_msg);
  auto& from = static_cast<const ZeroRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.ZeroRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroRequest::CopyFrom(const ZeroRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.ZeroRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroRequest::IsInitialized() const {
  return true;
}

void ZeroRequest::InternalSwap(ZeroRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[2]);
}

// ===================================================================

class ZeroReply::_Internal {
 public:
};

ZeroReply::ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.ZeroReply)
}
ZeroReply::ZeroReply(const ZeroReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZeroReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.ZeroReply)
}

inline void ZeroReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZeroReply::~ZeroReply() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.ZeroReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZeroReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZeroReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZeroReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZeroReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZeroReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.ZeroReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.ZeroReply)
  return target;
}

size_t ZeroReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.ZeroReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZeroReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZeroReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZeroReply::GetClassData() const { return &_class_data_; }


void ZeroReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZeroReply*>(&to_msg);
  auto& from = static_cast<const ZeroReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.ZeroReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZeroReply::CopyFrom(const ZeroReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.ZeroReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroReply::IsInitialized() const {
  return true;
}

void ZeroReply::InternalSwap(ZeroReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[3]);
}

// ===================================================================

class MotorStatus::_Internal {
 public:
};

MotorStatus::MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.MotorStatus)
}
MotorStatus::MotorStatus(const MotorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotorStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fault_){}
    , decltype(_impl_.enabling_){}
    , decltype(_impl_.running_){}
    , decltype(_impl_.instruction_completion_){}
    , decltype(_impl_.path_completion_){}
    , decltype(_impl_.zero_completion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fault_, &from._impl_.fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.zero_completion_) -
    reinterpret_cast<char*>(&_impl_.fault_)) + sizeof(_impl_.zero_completion_));
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.MotorStatus)
}

inline void MotorStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fault_){false}
    , decltype(_impl_.enabling_){false}
    , decltype(_impl_.running_){false}
    , decltype(_impl_.instruction_completion_){false}
    , decltype(_impl_.path_completion_){false}
    , decltype(_impl_.zero_completion_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MotorStatus::~MotorStatus() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.MotorStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotorStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.zero_completion_) -
      reinterpret_cast<char*>(&_impl_.fault_)) + sizeof(_impl_.zero_completion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool fault = 1 [json_name = "fault"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fault_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enabling = 2 [json_name = "enabling"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enabling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool running = 3 [json_name = "running"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool instruction_completion = 4 [json_name = "instructionCompletion"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.instruction_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool path_completion = 5 [json_name = "pathCompletion"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.path_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool zero_completion = 6 [json_name = "zeroCompletion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.zero_completion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.MotorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fault = 1 [json_name = "fault"];
  if (this->_internal_fault() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_fault(), target);
  }

  // bool enabling = 2 [json_name = "enabling"];
  if (this->_internal_enabling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabling(), target);
  }

  // bool running = 3 [json_name = "running"];
  if (this->_internal_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_running(), target);
  }

  // bool instruction_completion = 4 [json_name = "instructionCompletion"];
  if (this->_internal_instruction_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_instruction_completion(), target);
  }

  // bool path_completion = 5 [json_name = "pathCompletion"];
  if (this->_internal_path_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_path_completion(), target);
  }

  // bool zero_completion = 6 [json_name = "zeroCompletion"];
  if (this->_internal_zero_completion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_zero_completion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.MotorStatus)
  return target;
}

size_t MotorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.MotorStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool fault = 1 [json_name = "fault"];
  if (this->_internal_fault() != 0) {
    total_size += 1 + 1;
  }

  // bool enabling = 2 [json_name = "enabling"];
  if (this->_internal_enabling() != 0) {
    total_size += 1 + 1;
  }

  // bool running = 3 [json_name = "running"];
  if (this->_internal_running() != 0) {
    total_size += 1 + 1;
  }

  // bool instruction_completion = 4 [json_name = "instructionCompletion"];
  if (this->_internal_instruction_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool path_completion = 5 [json_name = "pathCompletion"];
  if (this->_internal_path_completion() != 0) {
    total_size += 1 + 1;
  }

  // bool zero_completion = 6 [json_name = "zeroCompletion"];
  if (this->_internal_zero_completion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorStatus::GetClassData() const { return &_class_data_; }


void MotorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotorStatus*>(&to_msg);
  auto& from = static_cast<const MotorStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.MotorStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fault() != 0) {
    _this->_internal_set_fault(from._internal_fault());
  }
  if (from._internal_enabling() != 0) {
    _this->_internal_set_enabling(from._internal_enabling());
  }
  if (from._internal_running() != 0) {
    _this->_internal_set_running(from._internal_running());
  }
  if (from._internal_instruction_completion() != 0) {
    _this->_internal_set_instruction_completion(from._internal_instruction_completion());
  }
  if (from._internal_path_completion() != 0) {
    _this->_internal_set_path_completion(from._internal_path_completion());
  }
  if (from._internal_zero_completion() != 0) {
    _this->_internal_set_zero_completion(from._internal_zero_completion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorStatus::CopyFrom(const MotorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.MotorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorStatus::IsInitialized() const {
  return true;
}

void MotorStatus::InternalSwap(MotorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorStatus, _impl_.zero_completion_)
      + sizeof(MotorStatus::_impl_.zero_completion_)
      - PROTOBUF_FIELD_OFFSET(MotorStatus, _impl_.fault_)>(
          reinterpret_cast<char*>(&_impl_.fault_),
          reinterpret_cast<char*>(&other->_impl_.fault_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[4]);
}

// ===================================================================

class MotorInfo::_Internal {
 public:
  static const ::htpp::machine::robot::v1::MotorStatus& motor_status(const MotorInfo* msg);
};

const ::htpp::machine::robot::v1::MotorStatus&
MotorInfo::_Internal::motor_status(const MotorInfo* msg) {
  return *msg->_impl_.motor_status_;
}
MotorInfo::MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.MotorInfo)
}
MotorInfo::MotorInfo(const MotorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motor_status_){nullptr}
    , decltype(_impl_.instr_pos_){}
    , decltype(_impl_.current_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motor_status()) {
    _this->_impl_.motor_status_ = new ::htpp::machine::robot::v1::MotorStatus(*from._impl_.motor_status_);
  }
  ::memcpy(&_impl_.instr_pos_, &from._impl_.instr_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_pos_) -
    reinterpret_cast<char*>(&_impl_.instr_pos_)) + sizeof(_impl_.current_pos_));
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.MotorInfo)
}

inline void MotorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motor_status_){nullptr}
    , decltype(_impl_.instr_pos_){int64_t{0}}
    , decltype(_impl_.current_pos_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MotorInfo::~MotorInfo() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.MotorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.motor_status_;
}

void MotorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.motor_status_ != nullptr) {
    delete _impl_.motor_status_;
  }
  _impl_.motor_status_ = nullptr;
  ::memset(&_impl_.instr_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_pos_) -
      reinterpret_cast<char*>(&_impl_.instr_pos_)) + sizeof(_impl_.current_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.machine.robot.v1.MotorStatus motor_status = 1 [json_name = "motorStatus"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motor_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 instr_pos = 2 [json_name = "instrPos"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.instr_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_pos = 3 [json_name = "currentPos"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.MotorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.machine.robot.v1.MotorStatus motor_status = 1 [json_name = "motorStatus"];
  if (this->_internal_has_motor_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::motor_status(this),
        _Internal::motor_status(this).GetCachedSize(), target, stream);
  }

  // int64 instr_pos = 2 [json_name = "instrPos"];
  if (this->_internal_instr_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_instr_pos(), target);
  }

  // int64 current_pos = 3 [json_name = "currentPos"];
  if (this->_internal_current_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.MotorInfo)
  return target;
}

size_t MotorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.MotorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.machine.robot.v1.MotorStatus motor_status = 1 [json_name = "motorStatus"];
  if (this->_internal_has_motor_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motor_status_);
  }

  // int64 instr_pos = 2 [json_name = "instrPos"];
  if (this->_internal_instr_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_instr_pos());
  }

  // int64 current_pos = 3 [json_name = "currentPos"];
  if (this->_internal_current_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorInfo::GetClassData() const { return &_class_data_; }


void MotorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotorInfo*>(&to_msg);
  auto& from = static_cast<const MotorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.MotorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motor_status()) {
    _this->_internal_mutable_motor_status()->::htpp::machine::robot::v1::MotorStatus::MergeFrom(
        from._internal_motor_status());
  }
  if (from._internal_instr_pos() != 0) {
    _this->_internal_set_instr_pos(from._internal_instr_pos());
  }
  if (from._internal_current_pos() != 0) {
    _this->_internal_set_current_pos(from._internal_current_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorInfo::CopyFrom(const MotorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.MotorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorInfo::IsInitialized() const {
  return true;
}

void MotorInfo::InternalSwap(MotorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorInfo, _impl_.current_pos_)
      + sizeof(MotorInfo::_impl_.current_pos_)
      - PROTOBUF_FIELD_OFFSET(MotorInfo, _impl_.motor_status_)>(
          reinterpret_cast<char*>(&_impl_.motor_status_),
          reinterpret_cast<char*>(&other->_impl_.motor_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[5]);
}

// ===================================================================

class MotorInfoRequest::_Internal {
 public:
};

MotorInfoRequest::MotorInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.MotorInfoRequest)
}
MotorInfoRequest::MotorInfoRequest(const MotorInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotorInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.MotorInfoRequest)
}

inline void MotorInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MotorInfoRequest::~MotorInfoRequest() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.MotorInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotorInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
}

void MotorInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotorInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.MotorInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 8 [json_name = "uuid"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.machine.robot.v1.MotorInfoRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.MotorInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.machine.robot.v1.MotorInfoRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.MotorInfoRequest)
  return target;
}

size_t MotorInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.MotorInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 8 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotorInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorInfoRequest::GetClassData() const { return &_class_data_; }


void MotorInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotorInfoRequest*>(&to_msg);
  auto& from = static_cast<const MotorInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.MotorInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorInfoRequest::CopyFrom(const MotorInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.MotorInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorInfoRequest::IsInitialized() const {
  return true;
}

void MotorInfoRequest::InternalSwap(MotorInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[6]);
}

// ===================================================================

class MotorInfoReply::_Internal {
 public:
};

MotorInfoReply::MotorInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.machine.robot.v1.MotorInfoReply)
}
MotorInfoReply::MotorInfoReply(const MotorInfoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MotorInfoReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motor_info_){from._impl_.motor_info_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.machine.robot.v1.MotorInfoReply)
}

inline void MotorInfoReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motor_info_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MotorInfoReply::~MotorInfoReply() {
  // @@protoc_insertion_point(destructor:htpp.machine.robot.v1.MotorInfoReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotorInfoReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.motor_info_.~RepeatedPtrField();
}

void MotorInfoReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MotorInfoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.machine.robot.v1.MotorInfoReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.motor_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorInfoReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.machine.robot.v1.MotorInfo motor_info = 1 [json_name = "motorInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motor_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotorInfoReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.machine.robot.v1.MotorInfoReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.machine.robot.v1.MotorInfo motor_info = 1 [json_name = "motorInfo"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_motor_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_motor_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.machine.robot.v1.MotorInfoReply)
  return target;
}

size_t MotorInfoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.machine.robot.v1.MotorInfoReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.machine.robot.v1.MotorInfo motor_info = 1 [json_name = "motorInfo"];
  total_size += 1UL * this->_internal_motor_info_size();
  for (const auto& msg : this->_impl_.motor_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorInfoReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MotorInfoReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorInfoReply::GetClassData() const { return &_class_data_; }


void MotorInfoReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MotorInfoReply*>(&to_msg);
  auto& from = static_cast<const MotorInfoReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.machine.robot.v1.MotorInfoReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.motor_info_.MergeFrom(from._impl_.motor_info_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorInfoReply::CopyFrom(const MotorInfoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.machine.robot.v1.MotorInfoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorInfoReply::IsInitialized() const {
  return true;
}

void MotorInfoReply::InternalSwap(MotorInfoReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.motor_info_.InternalSwap(&other->_impl_.motor_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorInfoReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_getter, &descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace robot
}  // namespace machine
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::CoordinateRequest*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::CoordinateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::CoordinateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::CoordinateReply*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::CoordinateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::CoordinateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::ZeroRequest*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::ZeroRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::ZeroRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::ZeroReply*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::ZeroReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::ZeroReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::MotorStatus*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::MotorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::MotorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::MotorInfo*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::MotorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::MotorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::MotorInfoRequest*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::MotorInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::MotorInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::machine::robot::v1::MotorInfoReply*
Arena::CreateMaybeMessage< ::htpp::machine::robot::v1::MotorInfoReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::machine::robot::v1::MotorInfoReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
