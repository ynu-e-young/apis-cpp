// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apis/htpp/machine/robot/v1/robot.proto
#ifndef GRPC_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto__INCLUDED
#define GRPC_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto__INCLUDED

#include "apis/htpp/machine/robot/v1/robot.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace htpp {
namespace machine {
namespace robot {
namespace v1 {

// 以下服务运行在机器人端，作为服务端监听后端的请求
class Robot final {
 public:
  static constexpr char const* service_full_name() {
    return "htpp.machine.robot.v1.Robot";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::htpp::machine::robot::v1::CoordinateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>> AsyncAppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>>(AsyncAppendCoordinateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>> PrepareAsyncAppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>>(PrepareAsyncAppendCoordinateRaw(context, request, cq));
    }
    virtual ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::htpp::machine::robot::v1::ZeroReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::htpp::machine::robot::v1::MotorInfoReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>* AsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::CoordinateReply>* PrepareAsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::robot::v1::MotorInfoReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::htpp::machine::robot::v1::CoordinateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>> AsyncAppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>>(AsyncAppendCoordinateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>> PrepareAsyncAppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>>(PrepareAsyncAppendCoordinateRaw(context, request, cq));
    }
    ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::htpp::machine::robot::v1::ZeroReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::htpp::machine::robot::v1::MotorInfoReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response, std::function<void(::grpc::Status)>) override;
      void AppendCoordinate(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response, std::function<void(::grpc::Status)>) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response, std::function<void(::grpc::Status)>) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>* AsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::CoordinateReply>* PrepareAsyncAppendCoordinateRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::CoordinateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::robot::v1::MotorInfoReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AppendCoordinate_;
    const ::grpc::internal::RpcMethod rpcmethod_Zero_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMotorStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AppendCoordinate(::grpc::ServerContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response);
    virtual ::grpc::Status Zero(::grpc::ServerContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response);
    virtual ::grpc::Status GetMotorStatus(::grpc::ServerContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendCoordinate(::grpc::ServerContext* context, ::htpp::machine::robot::v1::CoordinateRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::robot::v1::CoordinateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Zero() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::htpp::machine::robot::v1::ZeroRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::robot::v1::ZeroReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::htpp::machine::robot::v1::MotorInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::robot::v1::MotorInfoReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AppendCoordinate<WithAsyncMethod_Zero<WithAsyncMethod_GetMotorStatus<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::CoordinateRequest, ::htpp::machine::robot::v1::CoordinateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::robot::v1::CoordinateRequest* request, ::htpp::machine::robot::v1::CoordinateReply* response) { return this->AppendCoordinate(context, request, response); }));}
    void SetMessageAllocatorFor_AppendCoordinate(
        ::grpc::MessageAllocator< ::htpp::machine::robot::v1::CoordinateRequest, ::htpp::machine::robot::v1::CoordinateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::CoordinateRequest, ::htpp::machine::robot::v1::CoordinateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendCoordinate(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::ZeroRequest, ::htpp::machine::robot::v1::ZeroReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::robot::v1::ZeroRequest* request, ::htpp::machine::robot::v1::ZeroReply* response) { return this->Zero(context, request, response); }));}
    void SetMessageAllocatorFor_Zero(
        ::grpc::MessageAllocator< ::htpp::machine::robot::v1::ZeroRequest, ::htpp::machine::robot::v1::ZeroReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::ZeroRequest, ::htpp::machine::robot::v1::ZeroReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::MotorInfoRequest, ::htpp::machine::robot::v1::MotorInfoReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::robot::v1::MotorInfoRequest* request, ::htpp::machine::robot::v1::MotorInfoReply* response) { return this->GetMotorStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetMotorStatus(
        ::grpc::MessageAllocator< ::htpp::machine::robot::v1::MotorInfoRequest, ::htpp::machine::robot::v1::MotorInfoReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::robot::v1::MotorInfoRequest, ::htpp::machine::robot::v1::MotorInfoReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AppendCoordinate<WithCallbackMethod_Zero<WithCallbackMethod_GetMotorStatus<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Zero() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendCoordinate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Zero() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendCoordinate(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendCoordinate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Zero(context, request, response); }));
    }
    ~WithRawCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMotorStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendCoordinate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendCoordinate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::robot::v1::CoordinateRequest, ::htpp::machine::robot::v1::CoordinateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::robot::v1::CoordinateRequest, ::htpp::machine::robot::v1::CoordinateReply>* streamer) {
                       return this->StreamedAppendCoordinate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendCoordinate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendCoordinate(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::CoordinateRequest* /*request*/, ::htpp::machine::robot::v1::CoordinateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendCoordinate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::robot::v1::CoordinateRequest,::htpp::machine::robot::v1::CoordinateReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Zero() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::robot::v1::ZeroRequest, ::htpp::machine::robot::v1::ZeroReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::robot::v1::ZeroRequest, ::htpp::machine::robot::v1::ZeroReply>* streamer) {
                       return this->StreamedZero(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::ZeroRequest* /*request*/, ::htpp::machine::robot::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZero(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::robot::v1::ZeroRequest,::htpp::machine::robot::v1::ZeroReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::robot::v1::MotorInfoRequest, ::htpp::machine::robot::v1::MotorInfoReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::robot::v1::MotorInfoRequest, ::htpp::machine::robot::v1::MotorInfoReply>* streamer) {
                       return this->StreamedGetMotorStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::robot::v1::MotorInfoRequest* /*request*/, ::htpp::machine::robot::v1::MotorInfoReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMotorStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::robot::v1::MotorInfoRequest,::htpp::machine::robot::v1::MotorInfoReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AppendCoordinate<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AppendCoordinate<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace robot
}  // namespace machine
}  // namespace htpp


#endif  // GRPC_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto__INCLUDED
