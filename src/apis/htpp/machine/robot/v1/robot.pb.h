// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/htpp/machine/robot/v1/robot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
namespace htpp {
namespace machine {
namespace robot {
namespace v1 {
class CoordinateReply;
struct CoordinateReplyDefaultTypeInternal;
extern CoordinateReplyDefaultTypeInternal _CoordinateReply_default_instance_;
class CoordinateRequest;
struct CoordinateRequestDefaultTypeInternal;
extern CoordinateRequestDefaultTypeInternal _CoordinateRequest_default_instance_;
class MotorInfo;
struct MotorInfoDefaultTypeInternal;
extern MotorInfoDefaultTypeInternal _MotorInfo_default_instance_;
class MotorInfoReply;
struct MotorInfoReplyDefaultTypeInternal;
extern MotorInfoReplyDefaultTypeInternal _MotorInfoReply_default_instance_;
class MotorInfoRequest;
struct MotorInfoRequestDefaultTypeInternal;
extern MotorInfoRequestDefaultTypeInternal _MotorInfoRequest_default_instance_;
class MotorStatus;
struct MotorStatusDefaultTypeInternal;
extern MotorStatusDefaultTypeInternal _MotorStatus_default_instance_;
class ZeroReply;
struct ZeroReplyDefaultTypeInternal;
extern ZeroReplyDefaultTypeInternal _ZeroReply_default_instance_;
class ZeroRequest;
struct ZeroRequestDefaultTypeInternal;
extern ZeroRequestDefaultTypeInternal _ZeroRequest_default_instance_;
}  // namespace v1
}  // namespace robot
}  // namespace machine
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> ::htpp::machine::robot::v1::CoordinateReply* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::CoordinateReply>(Arena*);
template<> ::htpp::machine::robot::v1::CoordinateRequest* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::CoordinateRequest>(Arena*);
template<> ::htpp::machine::robot::v1::MotorInfo* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::MotorInfo>(Arena*);
template<> ::htpp::machine::robot::v1::MotorInfoReply* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::MotorInfoReply>(Arena*);
template<> ::htpp::machine::robot::v1::MotorInfoRequest* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::MotorInfoRequest>(Arena*);
template<> ::htpp::machine::robot::v1::MotorStatus* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::MotorStatus>(Arena*);
template<> ::htpp::machine::robot::v1::ZeroReply* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::ZeroReply>(Arena*);
template<> ::htpp::machine::robot::v1::ZeroRequest* Arena::CreateMaybeMessage<::htpp::machine::robot::v1::ZeroRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace htpp {
namespace machine {
namespace robot {
namespace v1 {

// ===================================================================

class CoordinateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.CoordinateRequest) */ {
 public:
  inline CoordinateRequest() : CoordinateRequest(nullptr) {}
  ~CoordinateRequest() override;
  explicit PROTOBUF_CONSTEXPR CoordinateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordinateRequest(const CoordinateRequest& from);
  CoordinateRequest(CoordinateRequest&& from) noexcept
    : CoordinateRequest() {
    *this = ::std::move(from);
  }

  inline CoordinateRequest& operator=(const CoordinateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinateRequest& operator=(CoordinateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinateRequest* internal_default_instance() {
    return reinterpret_cast<const CoordinateRequest*>(
               &_CoordinateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CoordinateRequest& a, CoordinateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordinateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordinateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CoordinateRequest& from) {
    CoordinateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.CoordinateRequest";
  }
  protected:
  explicit CoordinateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 8,
    kCheckNameFieldNumber = 9,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRxFieldNumber = 4,
    kRyFieldNumber = 5,
    kDelayFieldNumber = 7,
    kCheckFieldNumber = 6,
  };
  // string uuid = 8 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string check_name = 9 [json_name = "checkName"];
  void clear_check_name();
  const std::string& check_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_name();
  PROTOBUF_NODISCARD std::string* release_check_name();
  void set_allocated_check_name(std::string* check_name);
  private:
  const std::string& _internal_check_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_name(const std::string& value);
  std::string* _internal_mutable_check_name();
  public:

  // double x = 1 [json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2 [json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3 [json_name = "z"];
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double rx = 4 [json_name = "rx"];
  void clear_rx();
  double rx() const;
  void set_rx(double value);
  private:
  double _internal_rx() const;
  void _internal_set_rx(double value);
  public:

  // double ry = 5 [json_name = "ry"];
  void clear_ry();
  double ry() const;
  void set_ry(double value);
  private:
  double _internal_ry() const;
  void _internal_set_ry(double value);
  public:

  // double delay = 7 [json_name = "delay"];
  void clear_delay();
  double delay() const;
  void set_delay(double value);
  private:
  double _internal_delay() const;
  void _internal_set_delay(double value);
  public:

  // bool check = 6 [json_name = "check"];
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.CoordinateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_name_;
    double x_;
    double y_;
    double z_;
    double rx_;
    double ry_;
    double delay_;
    bool check_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class CoordinateReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.CoordinateReply) */ {
 public:
  inline CoordinateReply() : CoordinateReply(nullptr) {}
  ~CoordinateReply() override;
  explicit PROTOBUF_CONSTEXPR CoordinateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoordinateReply(const CoordinateReply& from);
  CoordinateReply(CoordinateReply&& from) noexcept
    : CoordinateReply() {
    *this = ::std::move(from);
  }

  inline CoordinateReply& operator=(const CoordinateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordinateReply& operator=(CoordinateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoordinateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoordinateReply* internal_default_instance() {
    return reinterpret_cast<const CoordinateReply*>(
               &_CoordinateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CoordinateReply& a, CoordinateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CoordinateReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoordinateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CoordinateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CoordinateReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoordinateReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CoordinateReply& from) {
    CoordinateReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordinateReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.CoordinateReply";
  }
  protected:
  explicit CoordinateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.CoordinateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ZeroRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.ZeroRequest) */ {
 public:
  inline ZeroRequest() : ZeroRequest(nullptr) {}
  ~ZeroRequest() override;
  explicit PROTOBUF_CONSTEXPR ZeroRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroRequest(const ZeroRequest& from);
  ZeroRequest(ZeroRequest&& from) noexcept
    : ZeroRequest() {
    *this = ::std::move(from);
  }

  inline ZeroRequest& operator=(const ZeroRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroRequest& operator=(ZeroRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroRequest* internal_default_instance() {
    return reinterpret_cast<const ZeroRequest*>(
               &_ZeroRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ZeroRequest& a, ZeroRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZeroRequest& from) {
    ZeroRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.ZeroRequest";
  }
  protected:
  explicit ZeroRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 8,
  };
  // string uuid = 8 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.ZeroRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ZeroReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.ZeroReply) */ {
 public:
  inline ZeroReply() : ZeroReply(nullptr) {}
  ~ZeroReply() override;
  explicit PROTOBUF_CONSTEXPR ZeroReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZeroReply(const ZeroReply& from);
  ZeroReply(ZeroReply&& from) noexcept
    : ZeroReply() {
    *this = ::std::move(from);
  }

  inline ZeroReply& operator=(const ZeroReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZeroReply& operator=(ZeroReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZeroReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZeroReply* internal_default_instance() {
    return reinterpret_cast<const ZeroReply*>(
               &_ZeroReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ZeroReply& a, ZeroReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ZeroReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZeroReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZeroReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZeroReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZeroReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZeroReply& from) {
    ZeroReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZeroReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.ZeroReply";
  }
  protected:
  explicit ZeroReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.ZeroReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class MotorStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.MotorStatus) */ {
 public:
  inline MotorStatus() : MotorStatus(nullptr) {}
  ~MotorStatus() override;
  explicit PROTOBUF_CONSTEXPR MotorStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorStatus(const MotorStatus& from);
  MotorStatus(MotorStatus&& from) noexcept
    : MotorStatus() {
    *this = ::std::move(from);
  }

  inline MotorStatus& operator=(const MotorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorStatus& operator=(MotorStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorStatus* internal_default_instance() {
    return reinterpret_cast<const MotorStatus*>(
               &_MotorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MotorStatus& a, MotorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotorStatus& from) {
    MotorStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.MotorStatus";
  }
  protected:
  explicit MotorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultFieldNumber = 1,
    kEnablingFieldNumber = 2,
    kRunningFieldNumber = 3,
    kInstructionCompletionFieldNumber = 4,
    kPathCompletionFieldNumber = 5,
    kZeroCompletionFieldNumber = 6,
  };
  // bool fault = 1 [json_name = "fault"];
  void clear_fault();
  bool fault() const;
  void set_fault(bool value);
  private:
  bool _internal_fault() const;
  void _internal_set_fault(bool value);
  public:

  // bool enabling = 2 [json_name = "enabling"];
  void clear_enabling();
  bool enabling() const;
  void set_enabling(bool value);
  private:
  bool _internal_enabling() const;
  void _internal_set_enabling(bool value);
  public:

  // bool running = 3 [json_name = "running"];
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // bool instruction_completion = 4 [json_name = "instructionCompletion"];
  void clear_instruction_completion();
  bool instruction_completion() const;
  void set_instruction_completion(bool value);
  private:
  bool _internal_instruction_completion() const;
  void _internal_set_instruction_completion(bool value);
  public:

  // bool path_completion = 5 [json_name = "pathCompletion"];
  void clear_path_completion();
  bool path_completion() const;
  void set_path_completion(bool value);
  private:
  bool _internal_path_completion() const;
  void _internal_set_path_completion(bool value);
  public:

  // bool zero_completion = 6 [json_name = "zeroCompletion"];
  void clear_zero_completion();
  bool zero_completion() const;
  void set_zero_completion(bool value);
  private:
  bool _internal_zero_completion() const;
  void _internal_set_zero_completion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.MotorStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool fault_;
    bool enabling_;
    bool running_;
    bool instruction_completion_;
    bool path_completion_;
    bool zero_completion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class MotorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.MotorInfo) */ {
 public:
  inline MotorInfo() : MotorInfo(nullptr) {}
  ~MotorInfo() override;
  explicit PROTOBUF_CONSTEXPR MotorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorInfo(const MotorInfo& from);
  MotorInfo(MotorInfo&& from) noexcept
    : MotorInfo() {
    *this = ::std::move(from);
  }

  inline MotorInfo& operator=(const MotorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorInfo& operator=(MotorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorInfo* internal_default_instance() {
    return reinterpret_cast<const MotorInfo*>(
               &_MotorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MotorInfo& a, MotorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotorInfo& from) {
    MotorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.MotorInfo";
  }
  protected:
  explicit MotorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorStatusFieldNumber = 1,
    kInstrPosFieldNumber = 2,
    kCurrentPosFieldNumber = 3,
  };
  // .htpp.machine.robot.v1.MotorStatus motor_status = 1 [json_name = "motorStatus"];
  bool has_motor_status() const;
  private:
  bool _internal_has_motor_status() const;
  public:
  void clear_motor_status();
  const ::htpp::machine::robot::v1::MotorStatus& motor_status() const;
  PROTOBUF_NODISCARD ::htpp::machine::robot::v1::MotorStatus* release_motor_status();
  ::htpp::machine::robot::v1::MotorStatus* mutable_motor_status();
  void set_allocated_motor_status(::htpp::machine::robot::v1::MotorStatus* motor_status);
  private:
  const ::htpp::machine::robot::v1::MotorStatus& _internal_motor_status() const;
  ::htpp::machine::robot::v1::MotorStatus* _internal_mutable_motor_status();
  public:
  void unsafe_arena_set_allocated_motor_status(
      ::htpp::machine::robot::v1::MotorStatus* motor_status);
  ::htpp::machine::robot::v1::MotorStatus* unsafe_arena_release_motor_status();

  // int64 instr_pos = 2 [json_name = "instrPos"];
  void clear_instr_pos();
  int64_t instr_pos() const;
  void set_instr_pos(int64_t value);
  private:
  int64_t _internal_instr_pos() const;
  void _internal_set_instr_pos(int64_t value);
  public:

  // int64 current_pos = 3 [json_name = "currentPos"];
  void clear_current_pos();
  int64_t current_pos() const;
  void set_current_pos(int64_t value);
  private:
  int64_t _internal_current_pos() const;
  void _internal_set_current_pos(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.MotorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::htpp::machine::robot::v1::MotorStatus* motor_status_;
    int64_t instr_pos_;
    int64_t current_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class MotorInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.MotorInfoRequest) */ {
 public:
  inline MotorInfoRequest() : MotorInfoRequest(nullptr) {}
  ~MotorInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR MotorInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorInfoRequest(const MotorInfoRequest& from);
  MotorInfoRequest(MotorInfoRequest&& from) noexcept
    : MotorInfoRequest() {
    *this = ::std::move(from);
  }

  inline MotorInfoRequest& operator=(const MotorInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorInfoRequest& operator=(MotorInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorInfoRequest* internal_default_instance() {
    return reinterpret_cast<const MotorInfoRequest*>(
               &_MotorInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MotorInfoRequest& a, MotorInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotorInfoRequest& from) {
    MotorInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.MotorInfoRequest";
  }
  protected:
  explicit MotorInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 8,
  };
  // string uuid = 8 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.MotorInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class MotorInfoReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.machine.robot.v1.MotorInfoReply) */ {
 public:
  inline MotorInfoReply() : MotorInfoReply(nullptr) {}
  ~MotorInfoReply() override;
  explicit PROTOBUF_CONSTEXPR MotorInfoReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorInfoReply(const MotorInfoReply& from);
  MotorInfoReply(MotorInfoReply&& from) noexcept
    : MotorInfoReply() {
    *this = ::std::move(from);
  }

  inline MotorInfoReply& operator=(const MotorInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorInfoReply& operator=(MotorInfoReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorInfoReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorInfoReply* internal_default_instance() {
    return reinterpret_cast<const MotorInfoReply*>(
               &_MotorInfoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MotorInfoReply& a, MotorInfoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorInfoReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorInfoReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MotorInfoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MotorInfoReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MotorInfoReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MotorInfoReply& from) {
    MotorInfoReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorInfoReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.machine.robot.v1.MotorInfoReply";
  }
  protected:
  explicit MotorInfoReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorInfoFieldNumber = 1,
  };
  // repeated .htpp.machine.robot.v1.MotorInfo motor_info = 1 [json_name = "motorInfo"];
  int motor_info_size() const;
  private:
  int _internal_motor_info_size() const;
  public:
  void clear_motor_info();
  ::htpp::machine::robot::v1::MotorInfo* mutable_motor_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::machine::robot::v1::MotorInfo >*
      mutable_motor_info();
  private:
  const ::htpp::machine::robot::v1::MotorInfo& _internal_motor_info(int index) const;
  ::htpp::machine::robot::v1::MotorInfo* _internal_add_motor_info();
  public:
  const ::htpp::machine::robot::v1::MotorInfo& motor_info(int index) const;
  ::htpp::machine::robot::v1::MotorInfo* add_motor_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::machine::robot::v1::MotorInfo >&
      motor_info() const;

  // @@protoc_insertion_point(class_scope:htpp.machine.robot.v1.MotorInfoReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::machine::robot::v1::MotorInfo > motor_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CoordinateRequest

// double x = 1 [json_name = "x"];
inline void CoordinateRequest::clear_x() {
  _impl_.x_ = 0;
}
inline double CoordinateRequest::_internal_x() const {
  return _impl_.x_;
}
inline double CoordinateRequest::x() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.x)
  return _internal_x();
}
inline void CoordinateRequest::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void CoordinateRequest::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.x)
}

// double y = 2 [json_name = "y"];
inline void CoordinateRequest::clear_y() {
  _impl_.y_ = 0;
}
inline double CoordinateRequest::_internal_y() const {
  return _impl_.y_;
}
inline double CoordinateRequest::y() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.y)
  return _internal_y();
}
inline void CoordinateRequest::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void CoordinateRequest::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.y)
}

// double z = 3 [json_name = "z"];
inline void CoordinateRequest::clear_z() {
  _impl_.z_ = 0;
}
inline double CoordinateRequest::_internal_z() const {
  return _impl_.z_;
}
inline double CoordinateRequest::z() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.z)
  return _internal_z();
}
inline void CoordinateRequest::_internal_set_z(double value) {
  
  _impl_.z_ = value;
}
inline void CoordinateRequest::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.z)
}

// double rx = 4 [json_name = "rx"];
inline void CoordinateRequest::clear_rx() {
  _impl_.rx_ = 0;
}
inline double CoordinateRequest::_internal_rx() const {
  return _impl_.rx_;
}
inline double CoordinateRequest::rx() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.rx)
  return _internal_rx();
}
inline void CoordinateRequest::_internal_set_rx(double value) {
  
  _impl_.rx_ = value;
}
inline void CoordinateRequest::set_rx(double value) {
  _internal_set_rx(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.rx)
}

// double ry = 5 [json_name = "ry"];
inline void CoordinateRequest::clear_ry() {
  _impl_.ry_ = 0;
}
inline double CoordinateRequest::_internal_ry() const {
  return _impl_.ry_;
}
inline double CoordinateRequest::ry() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.ry)
  return _internal_ry();
}
inline void CoordinateRequest::_internal_set_ry(double value) {
  
  _impl_.ry_ = value;
}
inline void CoordinateRequest::set_ry(double value) {
  _internal_set_ry(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.ry)
}

// bool check = 6 [json_name = "check"];
inline void CoordinateRequest::clear_check() {
  _impl_.check_ = false;
}
inline bool CoordinateRequest::_internal_check() const {
  return _impl_.check_;
}
inline bool CoordinateRequest::check() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.check)
  return _internal_check();
}
inline void CoordinateRequest::_internal_set_check(bool value) {
  
  _impl_.check_ = value;
}
inline void CoordinateRequest::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.check)
}

// double delay = 7 [json_name = "delay"];
inline void CoordinateRequest::clear_delay() {
  _impl_.delay_ = 0;
}
inline double CoordinateRequest::_internal_delay() const {
  return _impl_.delay_;
}
inline double CoordinateRequest::delay() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.delay)
  return _internal_delay();
}
inline void CoordinateRequest::_internal_set_delay(double value) {
  
  _impl_.delay_ = value;
}
inline void CoordinateRequest::set_delay(double value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.delay)
}

// string uuid = 8 [json_name = "uuid"];
inline void CoordinateRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& CoordinateRequest::uuid() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoordinateRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.uuid)
}
inline std::string* CoordinateRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.CoordinateRequest.uuid)
  return _s;
}
inline const std::string& CoordinateRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void CoordinateRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CoordinateRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* CoordinateRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:htpp.machine.robot.v1.CoordinateRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void CoordinateRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.machine.robot.v1.CoordinateRequest.uuid)
}

// string check_name = 9 [json_name = "checkName"];
inline void CoordinateRequest::clear_check_name() {
  _impl_.check_name_.ClearToEmpty();
}
inline const std::string& CoordinateRequest::check_name() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateRequest.check_name)
  return _internal_check_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoordinateRequest::set_check_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.check_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateRequest.check_name)
}
inline std::string* CoordinateRequest::mutable_check_name() {
  std::string* _s = _internal_mutable_check_name();
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.CoordinateRequest.check_name)
  return _s;
}
inline const std::string& CoordinateRequest::_internal_check_name() const {
  return _impl_.check_name_.Get();
}
inline void CoordinateRequest::_internal_set_check_name(const std::string& value) {
  
  _impl_.check_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CoordinateRequest::_internal_mutable_check_name() {
  
  return _impl_.check_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CoordinateRequest::release_check_name() {
  // @@protoc_insertion_point(field_release:htpp.machine.robot.v1.CoordinateRequest.check_name)
  return _impl_.check_name_.Release();
}
inline void CoordinateRequest::set_allocated_check_name(std::string* check_name) {
  if (check_name != nullptr) {
    
  } else {
    
  }
  _impl_.check_name_.SetAllocated(check_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.check_name_.IsDefault()) {
    _impl_.check_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.machine.robot.v1.CoordinateRequest.check_name)
}

// -------------------------------------------------------------------

// CoordinateReply

// bool status = 1 [json_name = "status"];
inline void CoordinateReply::clear_status() {
  _impl_.status_ = false;
}
inline bool CoordinateReply::_internal_status() const {
  return _impl_.status_;
}
inline bool CoordinateReply::status() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.CoordinateReply.status)
  return _internal_status();
}
inline void CoordinateReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void CoordinateReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.CoordinateReply.status)
}

// -------------------------------------------------------------------

// ZeroRequest

// string uuid = 8 [json_name = "uuid"];
inline void ZeroRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& ZeroRequest::uuid() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.ZeroRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ZeroRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.ZeroRequest.uuid)
}
inline std::string* ZeroRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.ZeroRequest.uuid)
  return _s;
}
inline const std::string& ZeroRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ZeroRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ZeroRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ZeroRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:htpp.machine.robot.v1.ZeroRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void ZeroRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.machine.robot.v1.ZeroRequest.uuid)
}

// -------------------------------------------------------------------

// ZeroReply

// bool status = 1 [json_name = "status"];
inline void ZeroReply::clear_status() {
  _impl_.status_ = false;
}
inline bool ZeroReply::_internal_status() const {
  return _impl_.status_;
}
inline bool ZeroReply::status() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.ZeroReply.status)
  return _internal_status();
}
inline void ZeroReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ZeroReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.ZeroReply.status)
}

// -------------------------------------------------------------------

// MotorStatus

// bool fault = 1 [json_name = "fault"];
inline void MotorStatus::clear_fault() {
  _impl_.fault_ = false;
}
inline bool MotorStatus::_internal_fault() const {
  return _impl_.fault_;
}
inline bool MotorStatus::fault() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.fault)
  return _internal_fault();
}
inline void MotorStatus::_internal_set_fault(bool value) {
  
  _impl_.fault_ = value;
}
inline void MotorStatus::set_fault(bool value) {
  _internal_set_fault(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.fault)
}

// bool enabling = 2 [json_name = "enabling"];
inline void MotorStatus::clear_enabling() {
  _impl_.enabling_ = false;
}
inline bool MotorStatus::_internal_enabling() const {
  return _impl_.enabling_;
}
inline bool MotorStatus::enabling() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.enabling)
  return _internal_enabling();
}
inline void MotorStatus::_internal_set_enabling(bool value) {
  
  _impl_.enabling_ = value;
}
inline void MotorStatus::set_enabling(bool value) {
  _internal_set_enabling(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.enabling)
}

// bool running = 3 [json_name = "running"];
inline void MotorStatus::clear_running() {
  _impl_.running_ = false;
}
inline bool MotorStatus::_internal_running() const {
  return _impl_.running_;
}
inline bool MotorStatus::running() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.running)
  return _internal_running();
}
inline void MotorStatus::_internal_set_running(bool value) {
  
  _impl_.running_ = value;
}
inline void MotorStatus::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.running)
}

// bool instruction_completion = 4 [json_name = "instructionCompletion"];
inline void MotorStatus::clear_instruction_completion() {
  _impl_.instruction_completion_ = false;
}
inline bool MotorStatus::_internal_instruction_completion() const {
  return _impl_.instruction_completion_;
}
inline bool MotorStatus::instruction_completion() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.instruction_completion)
  return _internal_instruction_completion();
}
inline void MotorStatus::_internal_set_instruction_completion(bool value) {
  
  _impl_.instruction_completion_ = value;
}
inline void MotorStatus::set_instruction_completion(bool value) {
  _internal_set_instruction_completion(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.instruction_completion)
}

// bool path_completion = 5 [json_name = "pathCompletion"];
inline void MotorStatus::clear_path_completion() {
  _impl_.path_completion_ = false;
}
inline bool MotorStatus::_internal_path_completion() const {
  return _impl_.path_completion_;
}
inline bool MotorStatus::path_completion() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.path_completion)
  return _internal_path_completion();
}
inline void MotorStatus::_internal_set_path_completion(bool value) {
  
  _impl_.path_completion_ = value;
}
inline void MotorStatus::set_path_completion(bool value) {
  _internal_set_path_completion(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.path_completion)
}

// bool zero_completion = 6 [json_name = "zeroCompletion"];
inline void MotorStatus::clear_zero_completion() {
  _impl_.zero_completion_ = false;
}
inline bool MotorStatus::_internal_zero_completion() const {
  return _impl_.zero_completion_;
}
inline bool MotorStatus::zero_completion() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorStatus.zero_completion)
  return _internal_zero_completion();
}
inline void MotorStatus::_internal_set_zero_completion(bool value) {
  
  _impl_.zero_completion_ = value;
}
inline void MotorStatus::set_zero_completion(bool value) {
  _internal_set_zero_completion(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorStatus.zero_completion)
}

// -------------------------------------------------------------------

// MotorInfo

// .htpp.machine.robot.v1.MotorStatus motor_status = 1 [json_name = "motorStatus"];
inline bool MotorInfo::_internal_has_motor_status() const {
  return this != internal_default_instance() && _impl_.motor_status_ != nullptr;
}
inline bool MotorInfo::has_motor_status() const {
  return _internal_has_motor_status();
}
inline void MotorInfo::clear_motor_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.motor_status_ != nullptr) {
    delete _impl_.motor_status_;
  }
  _impl_.motor_status_ = nullptr;
}
inline const ::htpp::machine::robot::v1::MotorStatus& MotorInfo::_internal_motor_status() const {
  const ::htpp::machine::robot::v1::MotorStatus* p = _impl_.motor_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::machine::robot::v1::MotorStatus&>(
      ::htpp::machine::robot::v1::_MotorStatus_default_instance_);
}
inline const ::htpp::machine::robot::v1::MotorStatus& MotorInfo::motor_status() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorInfo.motor_status)
  return _internal_motor_status();
}
inline void MotorInfo::unsafe_arena_set_allocated_motor_status(
    ::htpp::machine::robot::v1::MotorStatus* motor_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motor_status_);
  }
  _impl_.motor_status_ = motor_status;
  if (motor_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.machine.robot.v1.MotorInfo.motor_status)
}
inline ::htpp::machine::robot::v1::MotorStatus* MotorInfo::release_motor_status() {
  
  ::htpp::machine::robot::v1::MotorStatus* temp = _impl_.motor_status_;
  _impl_.motor_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::machine::robot::v1::MotorStatus* MotorInfo::unsafe_arena_release_motor_status() {
  // @@protoc_insertion_point(field_release:htpp.machine.robot.v1.MotorInfo.motor_status)
  
  ::htpp::machine::robot::v1::MotorStatus* temp = _impl_.motor_status_;
  _impl_.motor_status_ = nullptr;
  return temp;
}
inline ::htpp::machine::robot::v1::MotorStatus* MotorInfo::_internal_mutable_motor_status() {
  
  if (_impl_.motor_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::machine::robot::v1::MotorStatus>(GetArenaForAllocation());
    _impl_.motor_status_ = p;
  }
  return _impl_.motor_status_;
}
inline ::htpp::machine::robot::v1::MotorStatus* MotorInfo::mutable_motor_status() {
  ::htpp::machine::robot::v1::MotorStatus* _msg = _internal_mutable_motor_status();
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.MotorInfo.motor_status)
  return _msg;
}
inline void MotorInfo::set_allocated_motor_status(::htpp::machine::robot::v1::MotorStatus* motor_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.motor_status_;
  }
  if (motor_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(motor_status);
    if (message_arena != submessage_arena) {
      motor_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motor_status_ = motor_status;
  // @@protoc_insertion_point(field_set_allocated:htpp.machine.robot.v1.MotorInfo.motor_status)
}

// int64 instr_pos = 2 [json_name = "instrPos"];
inline void MotorInfo::clear_instr_pos() {
  _impl_.instr_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_instr_pos() const {
  return _impl_.instr_pos_;
}
inline int64_t MotorInfo::instr_pos() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorInfo.instr_pos)
  return _internal_instr_pos();
}
inline void MotorInfo::_internal_set_instr_pos(int64_t value) {
  
  _impl_.instr_pos_ = value;
}
inline void MotorInfo::set_instr_pos(int64_t value) {
  _internal_set_instr_pos(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorInfo.instr_pos)
}

// int64 current_pos = 3 [json_name = "currentPos"];
inline void MotorInfo::clear_current_pos() {
  _impl_.current_pos_ = int64_t{0};
}
inline int64_t MotorInfo::_internal_current_pos() const {
  return _impl_.current_pos_;
}
inline int64_t MotorInfo::current_pos() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorInfo.current_pos)
  return _internal_current_pos();
}
inline void MotorInfo::_internal_set_current_pos(int64_t value) {
  
  _impl_.current_pos_ = value;
}
inline void MotorInfo::set_current_pos(int64_t value) {
  _internal_set_current_pos(value);
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorInfo.current_pos)
}

// -------------------------------------------------------------------

// MotorInfoRequest

// string uuid = 8 [json_name = "uuid"];
inline void MotorInfoRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& MotorInfoRequest::uuid() const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorInfoRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MotorInfoRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.machine.robot.v1.MotorInfoRequest.uuid)
}
inline std::string* MotorInfoRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.MotorInfoRequest.uuid)
  return _s;
}
inline const std::string& MotorInfoRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void MotorInfoRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* MotorInfoRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* MotorInfoRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:htpp.machine.robot.v1.MotorInfoRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void MotorInfoRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.machine.robot.v1.MotorInfoRequest.uuid)
}

// -------------------------------------------------------------------

// MotorInfoReply

// repeated .htpp.machine.robot.v1.MotorInfo motor_info = 1 [json_name = "motorInfo"];
inline int MotorInfoReply::_internal_motor_info_size() const {
  return _impl_.motor_info_.size();
}
inline int MotorInfoReply::motor_info_size() const {
  return _internal_motor_info_size();
}
inline void MotorInfoReply::clear_motor_info() {
  _impl_.motor_info_.Clear();
}
inline ::htpp::machine::robot::v1::MotorInfo* MotorInfoReply::mutable_motor_info(int index) {
  // @@protoc_insertion_point(field_mutable:htpp.machine.robot.v1.MotorInfoReply.motor_info)
  return _impl_.motor_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::machine::robot::v1::MotorInfo >*
MotorInfoReply::mutable_motor_info() {
  // @@protoc_insertion_point(field_mutable_list:htpp.machine.robot.v1.MotorInfoReply.motor_info)
  return &_impl_.motor_info_;
}
inline const ::htpp::machine::robot::v1::MotorInfo& MotorInfoReply::_internal_motor_info(int index) const {
  return _impl_.motor_info_.Get(index);
}
inline const ::htpp::machine::robot::v1::MotorInfo& MotorInfoReply::motor_info(int index) const {
  // @@protoc_insertion_point(field_get:htpp.machine.robot.v1.MotorInfoReply.motor_info)
  return _internal_motor_info(index);
}
inline ::htpp::machine::robot::v1::MotorInfo* MotorInfoReply::_internal_add_motor_info() {
  return _impl_.motor_info_.Add();
}
inline ::htpp::machine::robot::v1::MotorInfo* MotorInfoReply::add_motor_info() {
  ::htpp::machine::robot::v1::MotorInfo* _add = _internal_add_motor_info();
  // @@protoc_insertion_point(field_add:htpp.machine.robot.v1.MotorInfoReply.motor_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::htpp::machine::robot::v1::MotorInfo >&
MotorInfoReply::motor_info() const {
  // @@protoc_insertion_point(field_list:htpp.machine.robot.v1.MotorInfoReply.motor_info)
  return _impl_.motor_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace robot
}  // namespace machine
}  // namespace htpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fmachine_2frobot_2fv1_2frobot_2eproto
