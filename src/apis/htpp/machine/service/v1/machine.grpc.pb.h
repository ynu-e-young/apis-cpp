// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apis/htpp/machine/service/v1/machine.proto
#ifndef GRPC_apis_2fhtpp_2fmachine_2fservice_2fv1_2fmachine_2eproto__INCLUDED
#define GRPC_apis_2fhtpp_2fmachine_2fservice_2fv1_2fmachine_2eproto__INCLUDED

#include "apis/htpp/machine/service/v1/machine.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace htpp {
namespace machine {
namespace service {
namespace v1 {

// The machine service definition.
class Machine final {
 public:
  static constexpr char const* service_full_name() {
    return "htpp.machine.service.v1.Machine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::htpp::machine::service::v1::MachinesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>> AsyncFindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>>(AsyncFindByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>> PrepareAsyncFindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>>(PrepareAsyncFindByUserIdRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::htpp::machine::service::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> AsyncCreate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::htpp::machine::service::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> AsyncUpdate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::htpp::machine::service::v1::MachineReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> AsyncGet(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::htpp::machine::service::v1::MoveReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>> AsyncMove(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>> PrepareAsyncMove(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::htpp::machine::service::v1::ZeroReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::htpp::machine::service::v1::GetMotorStatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::htpp::machine::service::v1::MoveDoneReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>> AsyncMoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>>(AsyncMoveDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>> PrepareAsyncMoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>>(PrepareAsyncMoveDoneRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::htpp::machine::service::v1::CronJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>> AsyncCreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>>(AsyncCreateCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>> PrepareAsyncCreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>>(PrepareAsyncCreateCronJobRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::htpp::machine::service::v1::DeleteCronJobReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>> AsyncDeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>>(AsyncDeleteCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>> PrepareAsyncDeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>>(PrepareAsyncDeleteCronJobRaw(context, request, cq));
    }
    virtual ::grpc::Status ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::htpp::machine::service::v1::CronJobsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>> AsyncListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>>(AsyncListCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>> PrepareAsyncListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>>(PrepareAsyncListCronJobRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>* AsyncFindByUserIdRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachinesReply>* PrepareAsyncFindByUserIdRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>* AsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveReply>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::GetMotorStatusReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>* AsyncMoveDoneRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::MoveDoneReply>* PrepareAsyncMoveDoneRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>* AsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobReply>* PrepareAsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>* AsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::DeleteCronJobReply>* PrepareAsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>* AsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::machine::service::v1::CronJobsReply>* PrepareAsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::htpp::machine::service::v1::MachinesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>> AsyncFindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>>(AsyncFindByUserIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>> PrepareAsyncFindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>>(PrepareAsyncFindByUserIdRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::htpp::machine::service::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> AsyncCreate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::htpp::machine::service::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> AsyncUpdate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::htpp::machine::service::v1::MachineReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> AsyncGet(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::htpp::machine::service::v1::MoveReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>> AsyncMove(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>> PrepareAsyncMove(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    ::grpc::Status Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::htpp::machine::service::v1::ZeroReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>> AsyncZero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>>(AsyncZeroRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>> PrepareAsyncZero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>>(PrepareAsyncZeroRaw(context, request, cq));
    }
    ::grpc::Status GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::htpp::machine::service::v1::GetMotorStatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>> AsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>>(AsyncGetMotorStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>> PrepareAsyncGetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>>(PrepareAsyncGetMotorStatusRaw(context, request, cq));
    }
    ::grpc::Status MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::htpp::machine::service::v1::MoveDoneReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>> AsyncMoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>>(AsyncMoveDoneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>> PrepareAsyncMoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>>(PrepareAsyncMoveDoneRaw(context, request, cq));
    }
    ::grpc::Status CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::htpp::machine::service::v1::CronJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>> AsyncCreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>>(AsyncCreateCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>> PrepareAsyncCreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>>(PrepareAsyncCreateCronJobRaw(context, request, cq));
    }
    ::grpc::Status DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::htpp::machine::service::v1::DeleteCronJobReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>> AsyncDeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>>(AsyncDeleteCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>> PrepareAsyncDeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>>(PrepareAsyncDeleteCronJobRaw(context, request, cq));
    }
    ::grpc::Status ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::htpp::machine::service::v1::CronJobsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>> AsyncListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>>(AsyncListCronJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>> PrepareAsyncListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>>(PrepareAsyncListCronJobRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response, std::function<void(::grpc::Status)>) override;
      void FindByUserId(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response, std::function<void(::grpc::Status)>) override;
      void Move(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response, std::function<void(::grpc::Status)>) override;
      void Zero(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response, std::function<void(::grpc::Status)>) override;
      void GetMotorStatus(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response, std::function<void(::grpc::Status)>) override;
      void MoveDone(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response, std::function<void(::grpc::Status)>) override;
      void CreateCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response, std::function<void(::grpc::Status)>) override;
      void DeleteCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response, std::function<void(::grpc::Status)>) override;
      void ListCronJob(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>* AsyncFindByUserIdRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachinesReply>* PrepareAsyncFindByUserIdRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MachineReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>* AsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveReply>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>* AsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::ZeroReply>* PrepareAsyncZeroRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ZeroRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>* AsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::GetMotorStatusReply>* PrepareAsyncGetMotorStatusRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>* AsyncMoveDoneRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::MoveDoneReply>* PrepareAsyncMoveDoneRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::MoveDoneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>* AsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobReply>* PrepareAsyncCreateCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>* AsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::DeleteCronJobReply>* PrepareAsyncDeleteCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>* AsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::machine::service::v1::CronJobsReply>* PrepareAsyncListCronJobRaw(::grpc::ClientContext* context, const ::htpp::machine::service::v1::ListCronJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindByUserId_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
    const ::grpc::internal::RpcMethod rpcmethod_Zero_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMotorStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveDone_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCronJob_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCronJob_;
    const ::grpc::internal::RpcMethod rpcmethod_ListCronJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindByUserId(::grpc::ServerContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response);
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response);
    virtual ::grpc::Status Zero(::grpc::ServerContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response);
    virtual ::grpc::Status GetMotorStatus(::grpc::ServerContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response);
    virtual ::grpc::Status MoveDone(::grpc::ServerContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response);
    virtual ::grpc::Status CreateCronJob(::grpc::ServerContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response);
    virtual ::grpc::Status DeleteCronJob(::grpc::ServerContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response);
    virtual ::grpc::Status ListCronJob(::grpc::ServerContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindByUserId() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByUserId(::grpc::ServerContext* context, ::htpp::machine::service::v1::FindByUserIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MachinesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::htpp::machine::service::v1::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::htpp::machine::service::v1::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::htpp::machine::service::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MachineReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::htpp::machine::service::v1::MoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MoveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Zero() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::htpp::machine::service::v1::ZeroRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::ZeroReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::GetMotorStatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveDone() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveDone(::grpc::ServerContext* context, ::htpp::machine::service::v1::MoveDoneRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::MoveDoneReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCronJob(::grpc::ServerContext* context, ::htpp::machine::service::v1::CreateCronJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::CronJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCronJob(::grpc::ServerContext* context, ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::DeleteCronJobReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCronJob() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCronJob(::grpc::ServerContext* context, ::htpp::machine::service::v1::ListCronJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::machine::service::v1::CronJobsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindByUserId<WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_Get<WithAsyncMethod_Move<WithAsyncMethod_Zero<WithAsyncMethod_GetMotorStatus<WithAsyncMethod_MoveDone<WithAsyncMethod_CreateCronJob<WithAsyncMethod_DeleteCronJob<WithAsyncMethod_ListCronJob<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindByUserId() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::FindByUserIdRequest, ::htpp::machine::service::v1::MachinesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::FindByUserIdRequest* request, ::htpp::machine::service::v1::MachinesReply* response) { return this->FindByUserId(context, request, response); }));}
    void SetMessageAllocatorFor_FindByUserId(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::FindByUserIdRequest, ::htpp::machine::service::v1::MachinesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::FindByUserIdRequest, ::htpp::machine::service::v1::MachinesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByUserId(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::CreateRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::CreateRequest* request, ::htpp::machine::service::v1::MachineReply* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::CreateRequest, ::htpp::machine::service::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::CreateRequest, ::htpp::machine::service::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::UpdateRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::UpdateRequest* request, ::htpp::machine::service::v1::MachineReply* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::UpdateRequest, ::htpp::machine::service::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::UpdateRequest, ::htpp::machine::service::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::GetRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::GetRequest* request, ::htpp::machine::service::v1::MachineReply* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::GetRequest, ::htpp::machine::service::v1::MachineReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::GetRequest, ::htpp::machine::service::v1::MachineReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Move() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::MoveRequest, ::htpp::machine::service::v1::MoveReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::MoveRequest* request, ::htpp::machine::service::v1::MoveReply* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::MoveRequest, ::htpp::machine::service::v1::MoveReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::MoveRequest, ::htpp::machine::service::v1::MoveReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::ZeroRequest, ::htpp::machine::service::v1::ZeroReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::ZeroRequest* request, ::htpp::machine::service::v1::ZeroReply* response) { return this->Zero(context, request, response); }));}
    void SetMessageAllocatorFor_Zero(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::ZeroRequest, ::htpp::machine::service::v1::ZeroReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::ZeroRequest, ::htpp::machine::service::v1::ZeroReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::GetMotorStatusRequest, ::htpp::machine::service::v1::GetMotorStatusReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::GetMotorStatusRequest* request, ::htpp::machine::service::v1::GetMotorStatusReply* response) { return this->GetMotorStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetMotorStatus(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::GetMotorStatusRequest, ::htpp::machine::service::v1::GetMotorStatusReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::GetMotorStatusRequest, ::htpp::machine::service::v1::GetMotorStatusReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveDone() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::MoveDoneRequest, ::htpp::machine::service::v1::MoveDoneReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::MoveDoneRequest* request, ::htpp::machine::service::v1::MoveDoneReply* response) { return this->MoveDone(context, request, response); }));}
    void SetMessageAllocatorFor_MoveDone(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::MoveDoneRequest, ::htpp::machine::service::v1::MoveDoneReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::MoveDoneRequest, ::htpp::machine::service::v1::MoveDoneReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveDone(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::CreateCronJobRequest, ::htpp::machine::service::v1::CronJobReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::CreateCronJobRequest* request, ::htpp::machine::service::v1::CronJobReply* response) { return this->CreateCronJob(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCronJob(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::CreateCronJobRequest, ::htpp::machine::service::v1::CronJobReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::CreateCronJobRequest, ::htpp::machine::service::v1::CronJobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::DeleteCronJobRequest, ::htpp::machine::service::v1::DeleteCronJobReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::DeleteCronJobRequest* request, ::htpp::machine::service::v1::DeleteCronJobReply* response) { return this->DeleteCronJob(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCronJob(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::DeleteCronJobRequest, ::htpp::machine::service::v1::DeleteCronJobReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::DeleteCronJobRequest, ::htpp::machine::service::v1::DeleteCronJobReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListCronJob() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::ListCronJobRequest, ::htpp::machine::service::v1::CronJobsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::machine::service::v1::ListCronJobRequest* request, ::htpp::machine::service::v1::CronJobsReply* response) { return this->ListCronJob(context, request, response); }));}
    void SetMessageAllocatorFor_ListCronJob(
        ::grpc::MessageAllocator< ::htpp::machine::service::v1::ListCronJobRequest, ::htpp::machine::service::v1::CronJobsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::machine::service::v1::ListCronJobRequest, ::htpp::machine::service::v1::CronJobsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_FindByUserId<WithCallbackMethod_Create<WithCallbackMethod_Update<WithCallbackMethod_Get<WithCallbackMethod_Move<WithCallbackMethod_Zero<WithCallbackMethod_GetMotorStatus<WithCallbackMethod_MoveDone<WithCallbackMethod_CreateCronJob<WithCallbackMethod_DeleteCronJob<WithCallbackMethod_ListCronJob<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindByUserId() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Zero() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveDone() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCronJob() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindByUserId() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByUserId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Zero() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestZero(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveDone() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveDone(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCronJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCronJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCronJob() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCronJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindByUserId() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindByUserId(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByUserId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Move() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~WithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Zero() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Zero(context, request, response); }));
    }
    ~WithRawCallbackMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Zero(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMotorStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMotorStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveDone() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveDone(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveDone(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCronJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCronJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListCronJob() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCronJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListCronJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindByUserId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindByUserId() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::FindByUserIdRequest, ::htpp::machine::service::v1::MachinesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::FindByUserIdRequest, ::htpp::machine::service::v1::MachinesReply>* streamer) {
                       return this->StreamedFindByUserId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindByUserId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindByUserId(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::FindByUserIdRequest* /*request*/, ::htpp::machine::service::v1::MachinesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindByUserId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::FindByUserIdRequest,::htpp::machine::service::v1::MachinesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::CreateRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::CreateRequest, ::htpp::machine::service::v1::MachineReply>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::CreateRequest,::htpp::machine::service::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::UpdateRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::UpdateRequest, ::htpp::machine::service::v1::MachineReply>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::UpdateRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::UpdateRequest,::htpp::machine::service::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::GetRequest, ::htpp::machine::service::v1::MachineReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::GetRequest, ::htpp::machine::service::v1::MachineReply>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetRequest* /*request*/, ::htpp::machine::service::v1::MachineReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::GetRequest,::htpp::machine::service::v1::MachineReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::MoveRequest, ::htpp::machine::service::v1::MoveReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::MoveRequest, ::htpp::machine::service::v1::MoveReply>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveRequest* /*request*/, ::htpp::machine::service::v1::MoveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::MoveRequest,::htpp::machine::service::v1::MoveReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Zero : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Zero() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::ZeroRequest, ::htpp::machine::service::v1::ZeroReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::ZeroRequest, ::htpp::machine::service::v1::ZeroReply>* streamer) {
                       return this->StreamedZero(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Zero() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Zero(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ZeroRequest* /*request*/, ::htpp::machine::service::v1::ZeroReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedZero(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::ZeroRequest,::htpp::machine::service::v1::ZeroReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMotorStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMotorStatus() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::GetMotorStatusRequest, ::htpp::machine::service::v1::GetMotorStatusReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::GetMotorStatusRequest, ::htpp::machine::service::v1::GetMotorStatusReply>* streamer) {
                       return this->StreamedGetMotorStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMotorStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMotorStatus(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::GetMotorStatusRequest* /*request*/, ::htpp::machine::service::v1::GetMotorStatusReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMotorStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::GetMotorStatusRequest,::htpp::machine::service::v1::GetMotorStatusReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveDone() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::MoveDoneRequest, ::htpp::machine::service::v1::MoveDoneReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::MoveDoneRequest, ::htpp::machine::service::v1::MoveDoneReply>* streamer) {
                       return this->StreamedMoveDone(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveDone(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::MoveDoneRequest* /*request*/, ::htpp::machine::service::v1::MoveDoneReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveDone(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::MoveDoneRequest,::htpp::machine::service::v1::MoveDoneReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCronJob() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::CreateCronJobRequest, ::htpp::machine::service::v1::CronJobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::CreateCronJobRequest, ::htpp::machine::service::v1::CronJobReply>* streamer) {
                       return this->StreamedCreateCronJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::CreateCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCronJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::CreateCronJobRequest,::htpp::machine::service::v1::CronJobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCronJob() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::DeleteCronJobRequest, ::htpp::machine::service::v1::DeleteCronJobReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::DeleteCronJobRequest, ::htpp::machine::service::v1::DeleteCronJobReply>* streamer) {
                       return this->StreamedDeleteCronJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::DeleteCronJobRequest* /*request*/, ::htpp::machine::service::v1::DeleteCronJobReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCronJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::DeleteCronJobRequest,::htpp::machine::service::v1::DeleteCronJobReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCronJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCronJob() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::machine::service::v1::ListCronJobRequest, ::htpp::machine::service::v1::CronJobsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::machine::service::v1::ListCronJobRequest, ::htpp::machine::service::v1::CronJobsReply>* streamer) {
                       return this->StreamedListCronJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListCronJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCronJob(::grpc::ServerContext* /*context*/, const ::htpp::machine::service::v1::ListCronJobRequest* /*request*/, ::htpp::machine::service::v1::CronJobsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCronJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::machine::service::v1::ListCronJobRequest,::htpp::machine::service::v1::CronJobsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindByUserId<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<WithStreamedUnaryMethod_MoveDone<WithStreamedUnaryMethod_CreateCronJob<WithStreamedUnaryMethod_DeleteCronJob<WithStreamedUnaryMethod_ListCronJob<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindByUserId<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_Zero<WithStreamedUnaryMethod_GetMotorStatus<WithStreamedUnaryMethod_MoveDone<WithStreamedUnaryMethod_CreateCronJob<WithStreamedUnaryMethod_DeleteCronJob<WithStreamedUnaryMethod_ListCronJob<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace service
}  // namespace machine
}  // namespace htpp


#endif  // GRPC_apis_2fhtpp_2fmachine_2fservice_2fv1_2fmachine_2eproto__INCLUDED
