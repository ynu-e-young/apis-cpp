// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/htpp/user/service/v1/user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
namespace htpp {
namespace user {
namespace service {
namespace v1 {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class FindByEmailRequest;
struct FindByEmailRequestDefaultTypeInternal;
extern FindByEmailRequestDefaultTypeInternal _FindByEmailRequest_default_instance_;
class FindByUsernameRequest;
struct FindByUsernameRequestDefaultTypeInternal;
extern FindByUsernameRequestDefaultTypeInternal _FindByUsernameRequest_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UserReply;
struct UserReplyDefaultTypeInternal;
extern UserReplyDefaultTypeInternal _UserReply_default_instance_;
class UserStruct;
struct UserStructDefaultTypeInternal;
extern UserStructDefaultTypeInternal _UserStruct_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace user
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> ::htpp::user::service::v1::CreateRequest* Arena::CreateMaybeMessage<::htpp::user::service::v1::CreateRequest>(Arena*);
template<> ::htpp::user::service::v1::FindByEmailRequest* Arena::CreateMaybeMessage<::htpp::user::service::v1::FindByEmailRequest>(Arena*);
template<> ::htpp::user::service::v1::FindByUsernameRequest* Arena::CreateMaybeMessage<::htpp::user::service::v1::FindByUsernameRequest>(Arena*);
template<> ::htpp::user::service::v1::GetRequest* Arena::CreateMaybeMessage<::htpp::user::service::v1::GetRequest>(Arena*);
template<> ::htpp::user::service::v1::UpdateRequest* Arena::CreateMaybeMessage<::htpp::user::service::v1::UpdateRequest>(Arena*);
template<> ::htpp::user::service::v1::UserReply* Arena::CreateMaybeMessage<::htpp::user::service::v1::UserReply>(Arena*);
template<> ::htpp::user::service::v1::UserStruct* Arena::CreateMaybeMessage<::htpp::user::service::v1::UserStruct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace htpp {
namespace user {
namespace service {
namespace v1 {

// ===================================================================

class FindByUsernameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.FindByUsernameRequest) */ {
 public:
  inline FindByUsernameRequest() : FindByUsernameRequest(nullptr) {}
  ~FindByUsernameRequest() override;
  explicit PROTOBUF_CONSTEXPR FindByUsernameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindByUsernameRequest(const FindByUsernameRequest& from);
  FindByUsernameRequest(FindByUsernameRequest&& from) noexcept
    : FindByUsernameRequest() {
    *this = ::std::move(from);
  }

  inline FindByUsernameRequest& operator=(const FindByUsernameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindByUsernameRequest& operator=(FindByUsernameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindByUsernameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindByUsernameRequest* internal_default_instance() {
    return reinterpret_cast<const FindByUsernameRequest*>(
               &_FindByUsernameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FindByUsernameRequest& a, FindByUsernameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindByUsernameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindByUsernameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindByUsernameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindByUsernameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindByUsernameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindByUsernameRequest& from) {
    FindByUsernameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindByUsernameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.FindByUsernameRequest";
  }
  protected:
  explicit FindByUsernameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1 [json_name = "username"];
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.FindByUsernameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class FindByEmailRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.FindByEmailRequest) */ {
 public:
  inline FindByEmailRequest() : FindByEmailRequest(nullptr) {}
  ~FindByEmailRequest() override;
  explicit PROTOBUF_CONSTEXPR FindByEmailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindByEmailRequest(const FindByEmailRequest& from);
  FindByEmailRequest(FindByEmailRequest&& from) noexcept
    : FindByEmailRequest() {
    *this = ::std::move(from);
  }

  inline FindByEmailRequest& operator=(const FindByEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindByEmailRequest& operator=(FindByEmailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindByEmailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindByEmailRequest* internal_default_instance() {
    return reinterpret_cast<const FindByEmailRequest*>(
               &_FindByEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FindByEmailRequest& a, FindByEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindByEmailRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindByEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindByEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindByEmailRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindByEmailRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindByEmailRequest& from) {
    FindByEmailRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindByEmailRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.FindByEmailRequest";
  }
  protected:
  explicit FindByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.FindByEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRequest& from) {
    CreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::user::service::v1::UserStruct& user() const;
  PROTOBUF_NODISCARD ::htpp::user::service::v1::UserStruct* release_user();
  ::htpp::user::service::v1::UserStruct* mutable_user();
  void set_allocated_user(::htpp::user::service::v1::UserStruct* user);
  private:
  const ::htpp::user::service::v1::UserStruct& _internal_user() const;
  ::htpp::user::service::v1::UserStruct* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::user::service::v1::UserStruct* user);
  ::htpp::user::service::v1::UserStruct* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::htpp::user::service::v1::UserStruct* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRequest& from) {
    UpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::user::service::v1::UserStruct& user() const;
  PROTOBUF_NODISCARD ::htpp::user::service::v1::UserStruct* release_user();
  ::htpp::user::service::v1::UserStruct* mutable_user();
  void set_allocated_user(::htpp::user::service::v1::UserStruct* user);
  private:
  const ::htpp::user::service::v1::UserStruct& _internal_user() const;
  ::htpp::user::service::v1::UserStruct* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::user::service::v1::UserStruct* user);
  ::htpp::user::service::v1::UserStruct* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::htpp::user::service::v1::UserStruct* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRequest& from) {
    GetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1 [json_name = "id"];
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.UserReply) */ {
 public:
  inline UserReply() : UserReply(nullptr) {}
  ~UserReply() override;
  explicit PROTOBUF_CONSTEXPR UserReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserReply(const UserReply& from);
  UserReply(UserReply&& from) noexcept
    : UserReply() {
    *this = ::std::move(from);
  }

  inline UserReply& operator=(const UserReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReply& operator=(UserReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserReply* internal_default_instance() {
    return reinterpret_cast<const UserReply*>(
               &_UserReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserReply& a, UserReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserReply& from) {
    UserReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.UserReply";
  }
  protected:
  explicit UserReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::htpp::user::service::v1::UserStruct& user() const;
  PROTOBUF_NODISCARD ::htpp::user::service::v1::UserStruct* release_user();
  ::htpp::user::service::v1::UserStruct* mutable_user();
  void set_allocated_user(::htpp::user::service::v1::UserStruct* user);
  private:
  const ::htpp::user::service::v1::UserStruct& _internal_user() const;
  ::htpp::user::service::v1::UserStruct* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::htpp::user::service::v1::UserStruct* user);
  ::htpp::user::service::v1::UserStruct* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.UserReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::htpp::user::service::v1::UserStruct* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// -------------------------------------------------------------------

class UserStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:htpp.user.service.v1.UserStruct) */ {
 public:
  inline UserStruct() : UserStruct(nullptr) {}
  ~UserStruct() override;
  explicit PROTOBUF_CONSTEXPR UserStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserStruct(const UserStruct& from);
  UserStruct(UserStruct&& from) noexcept
    : UserStruct() {
    *this = ::std::move(from);
  }

  inline UserStruct& operator=(const UserStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStruct& operator=(UserStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserStruct* internal_default_instance() {
    return reinterpret_cast<const UserStruct*>(
               &_UserStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserStruct& a, UserStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserStruct& from) {
    UserStruct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "htpp.user.service.v1.UserStruct";
  }
  protected:
  explicit UserStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kPasswordHashFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string email = 2 [json_name = "email"];
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string username = 3 [json_name = "username"];
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password_hash = 4 [json_name = "passwordHash"];
  void clear_password_hash();
  const std::string& password_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_hash();
  PROTOBUF_NODISCARD std::string* release_password_hash();
  void set_allocated_password_hash(std::string* password_hash);
  private:
  const std::string& _internal_password_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_hash(const std::string& value);
  std::string* _internal_mutable_password_hash();
  public:

  // int64 id = 1 [json_name = "id"];
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:htpp.user.service.v1.UserStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_hash_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FindByUsernameRequest

// string username = 1 [json_name = "username"];
inline void FindByUsernameRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& FindByUsernameRequest::username() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.FindByUsernameRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindByUsernameRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.FindByUsernameRequest.username)
}
inline std::string* FindByUsernameRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.FindByUsernameRequest.username)
  return _s;
}
inline const std::string& FindByUsernameRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void FindByUsernameRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* FindByUsernameRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* FindByUsernameRequest::release_username() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.FindByUsernameRequest.username)
  return _impl_.username_.Release();
}
inline void FindByUsernameRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.FindByUsernameRequest.username)
}

// -------------------------------------------------------------------

// FindByEmailRequest

// string email = 1 [json_name = "email"];
inline void FindByEmailRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& FindByEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.FindByEmailRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindByEmailRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.FindByEmailRequest.email)
}
inline std::string* FindByEmailRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.FindByEmailRequest.email)
  return _s;
}
inline const std::string& FindByEmailRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void FindByEmailRequest::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* FindByEmailRequest::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* FindByEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.FindByEmailRequest.email)
  return _impl_.email_.Release();
}
inline void FindByEmailRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.FindByEmailRequest.email)
}

// -------------------------------------------------------------------

// CreateRequest

// .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
inline bool CreateRequest::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool CreateRequest::has_user() const {
  return _internal_has_user();
}
inline void CreateRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::htpp::user::service::v1::UserStruct& CreateRequest::_internal_user() const {
  const ::htpp::user::service::v1::UserStruct* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::user::service::v1::UserStruct&>(
      ::htpp::user::service::v1::_UserStruct_default_instance_);
}
inline const ::htpp::user::service::v1::UserStruct& CreateRequest::user() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.CreateRequest.user)
  return _internal_user();
}
inline void CreateRequest::unsafe_arena_set_allocated_user(
    ::htpp::user::service::v1::UserStruct* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.user.service.v1.CreateRequest.user)
}
inline ::htpp::user::service::v1::UserStruct* CreateRequest::release_user() {
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* CreateRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.CreateRequest.user)
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* CreateRequest::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::user::service::v1::UserStruct>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::htpp::user::service::v1::UserStruct* CreateRequest::mutable_user() {
  ::htpp::user::service::v1::UserStruct* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.CreateRequest.user)
  return _msg;
}
inline void CreateRequest::set_allocated_user(::htpp::user::service::v1::UserStruct* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.CreateRequest.user)
}

// -------------------------------------------------------------------

// UpdateRequest

// .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
inline bool UpdateRequest::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool UpdateRequest::has_user() const {
  return _internal_has_user();
}
inline void UpdateRequest::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::htpp::user::service::v1::UserStruct& UpdateRequest::_internal_user() const {
  const ::htpp::user::service::v1::UserStruct* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::user::service::v1::UserStruct&>(
      ::htpp::user::service::v1::_UserStruct_default_instance_);
}
inline const ::htpp::user::service::v1::UserStruct& UpdateRequest::user() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UpdateRequest.user)
  return _internal_user();
}
inline void UpdateRequest::unsafe_arena_set_allocated_user(
    ::htpp::user::service::v1::UserStruct* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.user.service.v1.UpdateRequest.user)
}
inline ::htpp::user::service::v1::UserStruct* UpdateRequest::release_user() {
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* UpdateRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.UpdateRequest.user)
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* UpdateRequest::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::user::service::v1::UserStruct>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::htpp::user::service::v1::UserStruct* UpdateRequest::mutable_user() {
  ::htpp::user::service::v1::UserStruct* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.UpdateRequest.user)
  return _msg;
}
inline void UpdateRequest::set_allocated_user(::htpp::user::service::v1::UserStruct* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.UpdateRequest.user)
}

// -------------------------------------------------------------------

// GetRequest

// int64 id = 1 [json_name = "id"];
inline void GetRequest::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t GetRequest::_internal_id() const {
  return _impl_.id_;
}
inline int64_t GetRequest::id() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.GetRequest.id)
  return _internal_id();
}
inline void GetRequest::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void GetRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.GetRequest.id)
}

// -------------------------------------------------------------------

// UserReply

// .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
inline bool UserReply::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool UserReply::has_user() const {
  return _internal_has_user();
}
inline void UserReply::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::htpp::user::service::v1::UserStruct& UserReply::_internal_user() const {
  const ::htpp::user::service::v1::UserStruct* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::htpp::user::service::v1::UserStruct&>(
      ::htpp::user::service::v1::_UserStruct_default_instance_);
}
inline const ::htpp::user::service::v1::UserStruct& UserReply::user() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UserReply.user)
  return _internal_user();
}
inline void UserReply::unsafe_arena_set_allocated_user(
    ::htpp::user::service::v1::UserStruct* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:htpp.user.service.v1.UserReply.user)
}
inline ::htpp::user::service::v1::UserStruct* UserReply::release_user() {
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* UserReply::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.UserReply.user)
  
  ::htpp::user::service::v1::UserStruct* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::htpp::user::service::v1::UserStruct* UserReply::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::htpp::user::service::v1::UserStruct>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::htpp::user::service::v1::UserStruct* UserReply::mutable_user() {
  ::htpp::user::service::v1::UserStruct* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.UserReply.user)
  return _msg;
}
inline void UserReply::set_allocated_user(::htpp::user::service::v1::UserStruct* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.UserReply.user)
}

// -------------------------------------------------------------------

// UserStruct

// int64 id = 1 [json_name = "id"];
inline void UserStruct::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t UserStruct::_internal_id() const {
  return _impl_.id_;
}
inline int64_t UserStruct::id() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UserStruct.id)
  return _internal_id();
}
inline void UserStruct::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void UserStruct::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.UserStruct.id)
}

// string email = 2 [json_name = "email"];
inline void UserStruct::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserStruct::email() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UserStruct.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserStruct::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.UserStruct.email)
}
inline std::string* UserStruct::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.UserStruct.email)
  return _s;
}
inline const std::string& UserStruct::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserStruct::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserStruct::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserStruct::release_email() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.UserStruct.email)
  return _impl_.email_.Release();
}
inline void UserStruct::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.UserStruct.email)
}

// string username = 3 [json_name = "username"];
inline void UserStruct::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserStruct::username() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UserStruct.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserStruct::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.UserStruct.username)
}
inline std::string* UserStruct::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.UserStruct.username)
  return _s;
}
inline const std::string& UserStruct::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserStruct::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserStruct::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserStruct::release_username() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.UserStruct.username)
  return _impl_.username_.Release();
}
inline void UserStruct::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.UserStruct.username)
}

// string password_hash = 4 [json_name = "passwordHash"];
inline void UserStruct::clear_password_hash() {
  _impl_.password_hash_.ClearToEmpty();
}
inline const std::string& UserStruct::password_hash() const {
  // @@protoc_insertion_point(field_get:htpp.user.service.v1.UserStruct.password_hash)
  return _internal_password_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserStruct::set_password_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:htpp.user.service.v1.UserStruct.password_hash)
}
inline std::string* UserStruct::mutable_password_hash() {
  std::string* _s = _internal_mutable_password_hash();
  // @@protoc_insertion_point(field_mutable:htpp.user.service.v1.UserStruct.password_hash)
  return _s;
}
inline const std::string& UserStruct::_internal_password_hash() const {
  return _impl_.password_hash_.Get();
}
inline void UserStruct::_internal_set_password_hash(const std::string& value) {
  
  _impl_.password_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* UserStruct::_internal_mutable_password_hash() {
  
  return _impl_.password_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* UserStruct::release_password_hash() {
  // @@protoc_insertion_point(field_release:htpp.user.service.v1.UserStruct.password_hash)
  return _impl_.password_hash_.Release();
}
inline void UserStruct::set_allocated_password_hash(std::string* password_hash) {
  if (password_hash != nullptr) {
    
  } else {
    
  }
  _impl_.password_hash_.SetAllocated(password_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_hash_.IsDefault()) {
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:htpp.user.service.v1.UserStruct.password_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace service
}  // namespace user
}  // namespace htpp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto
