// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apis/htpp/user/service/v1/user.proto
#ifndef GRPC_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto__INCLUDED
#define GRPC_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto__INCLUDED

#include "apis/htpp/user/service/v1/user.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace htpp {
namespace user {
namespace service {
namespace v1 {

// The user service definition.
class User final {
 public:
  static constexpr char const* service_full_name() {
    return "htpp.user.service.v1.User";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::htpp::user::service::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> AsyncFindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(AsyncFindByUsernameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> PrepareAsyncFindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(PrepareAsyncFindByUsernameRaw(context, request, cq));
    }
    virtual ::grpc::Status FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::htpp::user::service::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> AsyncFindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(AsyncFindByEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> PrepareAsyncFindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(PrepareAsyncFindByEmailRaw(context, request, cq));
    }
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::htpp::user::service::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> AsyncCreate(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::htpp::user::service::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> AsyncUpdate(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::htpp::user::service::v1::UserReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> AsyncGet(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* AsyncFindByUsernameRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* PrepareAsyncFindByUsernameRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* AsyncFindByEmailRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* PrepareAsyncFindByEmailRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::htpp::user::service::v1::UserReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::htpp::user::service::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> AsyncFindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(AsyncFindByUsernameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> PrepareAsyncFindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(PrepareAsyncFindByUsernameRaw(context, request, cq));
    }
    ::grpc::Status FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::htpp::user::service::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> AsyncFindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(AsyncFindByEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> PrepareAsyncFindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(PrepareAsyncFindByEmailRaw(context, request, cq));
    }
    ::grpc::Status Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::htpp::user::service::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> AsyncCreate(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::htpp::user::service::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> AsyncUpdate(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::htpp::user::service::v1::UserReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> AsyncGet(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void FindByUsername(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void FindByEmail(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* AsyncFindByUsernameRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* PrepareAsyncFindByUsernameRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByUsernameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* AsyncFindByEmailRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* PrepareAsyncFindByEmailRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::FindByEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* AsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::CreateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* AsyncGetRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::htpp::user::service::v1::UserReply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::htpp::user::service::v1::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FindByUsername_;
    const ::grpc::internal::RpcMethod rpcmethod_FindByEmail_;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FindByUsername(::grpc::ServerContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response);
    virtual ::grpc::Status FindByEmail(::grpc::ServerContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response);
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindByUsername() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByUsername(::grpc::ServerContext* context, ::htpp::user::service::v1::FindByUsernameRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::user::service::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindByEmail() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByEmail(::grpc::ServerContext* context, ::htpp::user::service::v1::FindByEmailRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::user::service::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::htpp::user::service::v1::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::user::service::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::htpp::user::service::v1::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::user::service::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::htpp::user::service::v1::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::htpp::user::service::v1::UserReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FindByUsername<WithAsyncMethod_FindByEmail<WithAsyncMethod_Create<WithAsyncMethod_Update<WithAsyncMethod_Get<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindByUsername() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::FindByUsernameRequest, ::htpp::user::service::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::user::service::v1::FindByUsernameRequest* request, ::htpp::user::service::v1::UserReply* response) { return this->FindByUsername(context, request, response); }));}
    void SetMessageAllocatorFor_FindByUsername(
        ::grpc::MessageAllocator< ::htpp::user::service::v1::FindByUsernameRequest, ::htpp::user::service::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::FindByUsernameRequest, ::htpp::user::service::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByUsername(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FindByEmail() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::FindByEmailRequest, ::htpp::user::service::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::user::service::v1::FindByEmailRequest* request, ::htpp::user::service::v1::UserReply* response) { return this->FindByEmail(context, request, response); }));}
    void SetMessageAllocatorFor_FindByEmail(
        ::grpc::MessageAllocator< ::htpp::user::service::v1::FindByEmailRequest, ::htpp::user::service::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::FindByEmailRequest, ::htpp::user::service::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Create() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::CreateRequest, ::htpp::user::service::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::user::service::v1::CreateRequest* request, ::htpp::user::service::v1::UserReply* response) { return this->Create(context, request, response); }));}
    void SetMessageAllocatorFor_Create(
        ::grpc::MessageAllocator< ::htpp::user::service::v1::CreateRequest, ::htpp::user::service::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::CreateRequest, ::htpp::user::service::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::UpdateRequest, ::htpp::user::service::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::user::service::v1::UpdateRequest* request, ::htpp::user::service::v1::UserReply* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::htpp::user::service::v1::UpdateRequest, ::htpp::user::service::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::UpdateRequest, ::htpp::user::service::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::GetRequest, ::htpp::user::service::v1::UserReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::htpp::user::service::v1::GetRequest* request, ::htpp::user::service::v1::UserReply* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::htpp::user::service::v1::GetRequest, ::htpp::user::service::v1::UserReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::htpp::user::service::v1::GetRequest, ::htpp::user::service::v1::UserReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_FindByUsername<WithCallbackMethod_FindByEmail<WithCallbackMethod_Create<WithCallbackMethod_Update<WithCallbackMethod_Get<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindByUsername() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindByEmail() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindByUsername() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByUsername(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindByEmail() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindByEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindByUsername() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindByUsername(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByUsername(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FindByEmail() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindByEmail(context, request, response); }));
    }
    ~WithRawCallbackMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FindByEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Create() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Create(context, request, response); }));
    }
    ~WithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Create(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindByUsername : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindByUsername() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::user::service::v1::FindByUsernameRequest, ::htpp::user::service::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::user::service::v1::FindByUsernameRequest, ::htpp::user::service::v1::UserReply>* streamer) {
                       return this->StreamedFindByUsername(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindByUsername() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindByUsername(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByUsernameRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindByUsername(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::user::service::v1::FindByUsernameRequest,::htpp::user::service::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindByEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindByEmail() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::user::service::v1::FindByEmailRequest, ::htpp::user::service::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::user::service::v1::FindByEmailRequest, ::htpp::user::service::v1::UserReply>* streamer) {
                       return this->StreamedFindByEmail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FindByEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindByEmail(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::FindByEmailRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindByEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::user::service::v1::FindByEmailRequest,::htpp::user::service::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::user::service::v1::CreateRequest, ::htpp::user::service::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::user::service::v1::CreateRequest, ::htpp::user::service::v1::UserReply>* streamer) {
                       return this->StreamedCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::CreateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::user::service::v1::CreateRequest,::htpp::user::service::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::user::service::v1::UpdateRequest, ::htpp::user::service::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::user::service::v1::UpdateRequest, ::htpp::user::service::v1::UserReply>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::UpdateRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::user::service::v1::UpdateRequest,::htpp::user::service::v1::UserReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::htpp::user::service::v1::GetRequest, ::htpp::user::service::v1::UserReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::htpp::user::service::v1::GetRequest, ::htpp::user::service::v1::UserReply>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::htpp::user::service::v1::GetRequest* /*request*/, ::htpp::user::service::v1::UserReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::htpp::user::service::v1::GetRequest,::htpp::user::service::v1::UserReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FindByUsername<WithStreamedUnaryMethod_FindByEmail<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Get<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FindByUsername<WithStreamedUnaryMethod_FindByEmail<WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Get<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace service
}  // namespace user
}  // namespace htpp


#endif  // GRPC_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto__INCLUDED
