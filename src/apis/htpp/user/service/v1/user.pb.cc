// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/htpp/user/service/v1/user.proto

#include "apis/htpp/user/service/v1/user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace htpp {
namespace user {
namespace service {
namespace v1 {
PROTOBUF_CONSTEXPR FindByUsernameRequest::FindByUsernameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindByUsernameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindByUsernameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindByUsernameRequestDefaultTypeInternal() {}
  union {
    FindByUsernameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindByUsernameRequestDefaultTypeInternal _FindByUsernameRequest_default_instance_;
PROTOBUF_CONSTEXPR FindByEmailRequest::FindByEmailRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindByEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindByEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindByEmailRequestDefaultTypeInternal() {}
  union {
    FindByEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindByEmailRequestDefaultTypeInternal _FindByEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRequest::CreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateRequest::UpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRequestDefaultTypeInternal() {}
  union {
    UpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
PROTOBUF_CONSTEXPR UserReply::UserReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserReplyDefaultTypeInternal() {}
  union {
    UserReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserReplyDefaultTypeInternal _UserReply_default_instance_;
PROTOBUF_CONSTEXPR UserStruct::UserStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserStructDefaultTypeInternal() {}
  union {
    UserStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserStructDefaultTypeInternal _UserStruct_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace user
}  // namespace htpp
static ::_pb::Metadata file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto = nullptr;

const uint32_t TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::FindByUsernameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::FindByUsernameRequest, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::FindByEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::FindByEmailRequest, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::CreateRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UpdateRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::GetRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserReply, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserStruct, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserStruct, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserStruct, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::htpp::user::service::v1::UserStruct, _impl_.password_hash_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::htpp::user::service::v1::FindByUsernameRequest)},
  { 7, -1, -1, sizeof(::htpp::user::service::v1::FindByEmailRequest)},
  { 14, -1, -1, sizeof(::htpp::user::service::v1::CreateRequest)},
  { 21, -1, -1, sizeof(::htpp::user::service::v1::UpdateRequest)},
  { 28, -1, -1, sizeof(::htpp::user::service::v1::GetRequest)},
  { 35, -1, -1, sizeof(::htpp::user::service::v1::UserReply)},
  { 42, -1, -1, sizeof(::htpp::user::service::v1::UserStruct)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::htpp::user::service::v1::_FindByUsernameRequest_default_instance_._instance,
  &::htpp::user::service::v1::_FindByEmailRequest_default_instance_._instance,
  &::htpp::user::service::v1::_CreateRequest_default_instance_._instance,
  &::htpp::user::service::v1::_UpdateRequest_default_instance_._instance,
  &::htpp::user::service::v1::_GetRequest_default_instance_._instance,
  &::htpp::user::service::v1::_UserReply_default_instance_._instance,
  &::htpp::user::service::v1::_UserStruct_default_instance_._instance,
};

const char descriptor_table_protodef_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$apis/htpp/user/service/v1/user.proto\022\024"
  "htpp.user.service.v1\"3\n\025FindByUsernameRe"
  "quest\022\032\n\010username\030\001 \001(\tR\010username\"*\n\022Fin"
  "dByEmailRequest\022\024\n\005email\030\001 \001(\tR\005email\"E\n"
  "\rCreateRequest\0224\n\004user\030\001 \001(\0132 .htpp.user"
  ".service.v1.UserStructR\004user\"E\n\rUpdateRe"
  "quest\0224\n\004user\030\001 \001(\0132 .htpp.user.service."
  "v1.UserStructR\004user\"\034\n\nGetRequest\022\016\n\002id\030"
  "\001 \001(\003R\002id\"A\n\tUserReply\0224\n\004user\030\001 \001(\0132 .h"
  "tpp.user.service.v1.UserStructR\004user\"s\n\n"
  "UserStruct\022\016\n\002id\030\001 \001(\003R\002id\022\024\n\005email\030\002 \001("
  "\tR\005email\022\032\n\010username\030\003 \001(\tR\010username\022#\n\r"
  "password_hash\030\004 \001(\tR\014passwordHash2\264\003\n\004Us"
  "er\022`\n\016FindByUsername\022+.htpp.user.service"
  ".v1.FindByUsernameRequest\032\037.htpp.user.se"
  "rvice.v1.UserReply\"\000\022Z\n\013FindByEmail\022(.ht"
  "pp.user.service.v1.FindByEmailRequest\032\037."
  "htpp.user.service.v1.UserReply\"\000\022P\n\006Crea"
  "te\022#.htpp.user.service.v1.CreateRequest\032"
  "\037.htpp.user.service.v1.UserReply\"\000\022P\n\006Up"
  "date\022#.htpp.user.service.v1.UpdateReques"
  "t\032\037.htpp.user.service.v1.UserReply\"\000\022J\n\003"
  "Get\022 .htpp.user.service.v1.GetRequest\032\037."
  "htpp.user.service.v1.UserReply\"\000B\033P\001Z\027ht"
  "pp/user/service/v1;v1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto = {
    false, false, 989, descriptor_table_protodef_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto,
    "apis/htpp/user/service/v1/user.proto",
    &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto::offsets,
    file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto, file_level_enum_descriptors_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto,
    file_level_service_descriptors_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter() {
  return &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto(&descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto);
namespace htpp {
namespace user {
namespace service {
namespace v1 {

// ===================================================================

class FindByUsernameRequest::_Internal {
 public:
};

FindByUsernameRequest::FindByUsernameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.FindByUsernameRequest)
}
FindByUsernameRequest::FindByUsernameRequest(const FindByUsernameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindByUsernameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.FindByUsernameRequest)
}

inline void FindByUsernameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindByUsernameRequest::~FindByUsernameRequest() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.FindByUsernameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindByUsernameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void FindByUsernameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindByUsernameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.FindByUsernameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindByUsernameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1 [json_name = "username"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.user.service.v1.FindByUsernameRequest.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindByUsernameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.FindByUsernameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.user.service.v1.FindByUsernameRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.FindByUsernameRequest)
  return target;
}

size_t FindByUsernameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.FindByUsernameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindByUsernameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindByUsernameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindByUsernameRequest::GetClassData() const { return &_class_data_; }


void FindByUsernameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindByUsernameRequest*>(&to_msg);
  auto& from = static_cast<const FindByUsernameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.FindByUsernameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindByUsernameRequest::CopyFrom(const FindByUsernameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.FindByUsernameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindByUsernameRequest::IsInitialized() const {
  return true;
}

void FindByUsernameRequest::InternalSwap(FindByUsernameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FindByUsernameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[0]);
}

// ===================================================================

class FindByEmailRequest::_Internal {
 public:
};

FindByEmailRequest::FindByEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.FindByEmailRequest)
}
FindByEmailRequest::FindByEmailRequest(const FindByEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindByEmailRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.FindByEmailRequest)
}

inline void FindByEmailRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindByEmailRequest::~FindByEmailRequest() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.FindByEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindByEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void FindByEmailRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindByEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.FindByEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindByEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1 [json_name = "email"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.user.service.v1.FindByEmailRequest.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindByEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.FindByEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.user.service.v1.FindByEmailRequest.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.FindByEmailRequest)
  return target;
}

size_t FindByEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.FindByEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindByEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindByEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindByEmailRequest::GetClassData() const { return &_class_data_; }


void FindByEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindByEmailRequest*>(&to_msg);
  auto& from = static_cast<const FindByEmailRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.FindByEmailRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindByEmailRequest::CopyFrom(const FindByEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.FindByEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindByEmailRequest::IsInitialized() const {
  return true;
}

void FindByEmailRequest::InternalSwap(FindByEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FindByEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[1]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
  static const ::htpp::user::service::v1::UserStruct& user(const CreateRequest* msg);
};

const ::htpp::user::service::v1::UserStruct&
CreateRequest::_Internal::user(const CreateRequest* msg) {
  return *msg->_impl_.user_;
}
CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::htpp::user::service::v1::UserStruct(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.CreateRequest)
}

inline void CreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.CreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }


void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRequest*>(&to_msg);
  auto& from = static_cast<const CreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.CreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::htpp::user::service::v1::UserStruct::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[2]);
}

// ===================================================================

class UpdateRequest::_Internal {
 public:
  static const ::htpp::user::service::v1::UserStruct& user(const UpdateRequest* msg);
};

const ::htpp::user::service::v1::UserStruct&
UpdateRequest::_Internal::user(const UpdateRequest* msg) {
  return *msg->_impl_.user_;
}
UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::htpp::user::service::v1::UserStruct(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.UpdateRequest)
}

inline void UpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.UpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.UpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.UpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.UpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRequest::GetClassData() const { return &_class_data_; }


void UpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRequest*>(&to_msg);
  auto& from = static_cast<const UpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::htpp::user::service::v1::UserStruct::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[3]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.GetRequest)
}

inline void GetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.GetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[4]);
}

// ===================================================================

class UserReply::_Internal {
 public:
  static const ::htpp::user::service::v1::UserStruct& user(const UserReply* msg);
};

const ::htpp::user::service::v1::UserStruct&
UserReply::_Internal::user(const UserReply* msg) {
  return *msg->_impl_.user_;
}
UserReply::UserReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.UserReply)
}
UserReply::UserReply(const UserReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::htpp::user::service::v1::UserStruct(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.UserReply)
}

inline void UserReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserReply::~UserReply() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.UserReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UserReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.UserReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.UserReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.UserReply)
  return target;
}

size_t UserReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.UserReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.user.service.v1.UserStruct user = 1 [json_name = "user"];
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserReply::GetClassData() const { return &_class_data_; }


void UserReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserReply*>(&to_msg);
  auto& from = static_cast<const UserReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.UserReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::htpp::user::service::v1::UserStruct::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserReply::CopyFrom(const UserReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.UserReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserReply::IsInitialized() const {
  return true;
}

void UserReply::InternalSwap(UserReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[5]);
}

// ===================================================================

class UserStruct::_Internal {
 public:
};

UserStruct::UserStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.user.service.v1.UserStruct)
}
UserStruct::UserStruct(const UserStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password_hash().empty()) {
    _this->_impl_.password_hash_.Set(from._internal_password_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.user.service.v1.UserStruct)
}

inline void UserStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_hash_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserStruct::~UserStruct() {
  // @@protoc_insertion_point(destructor:htpp.user.service.v1.UserStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_hash_.Destroy();
}

void UserStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.user.service.v1.UserStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_hash_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2 [json_name = "email"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.user.service.v1.UserStruct.email"));
        } else
          goto handle_unusual;
        continue;
      // string username = 3 [json_name = "username"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.user.service.v1.UserStruct.username"));
        } else
          goto handle_unusual;
        continue;
      // string password_hash = 4 [json_name = "passwordHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "htpp.user.service.v1.UserStruct.password_hash"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.user.service.v1.UserStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.user.service.v1.UserStruct.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string username = 3 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.user.service.v1.UserStruct.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string password_hash = 4 [json_name = "passwordHash"];
  if (!this->_internal_password_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password_hash().data(), static_cast<int>(this->_internal_password_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "htpp.user.service.v1.UserStruct.password_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.user.service.v1.UserStruct)
  return target;
}

size_t UserStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.user.service.v1.UserStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2 [json_name = "email"];
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string username = 3 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password_hash = 4 [json_name = "passwordHash"];
  if (!this->_internal_password_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password_hash());
  }

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserStruct::GetClassData() const { return &_class_data_; }


void UserStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserStruct*>(&to_msg);
  auto& from = static_cast<const UserStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.user.service.v1.UserStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password_hash().empty()) {
    _this->_internal_set_password_hash(from._internal_password_hash());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserStruct::CopyFrom(const UserStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.user.service.v1.UserStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStruct::IsInitialized() const {
  return true;
}

void UserStruct::InternalSwap(UserStruct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_hash_, lhs_arena,
      &other->_impl_.password_hash_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_getter, &descriptor_table_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fuser_2fservice_2fv1_2fuser_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace user
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::FindByUsernameRequest*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::FindByUsernameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::FindByUsernameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::FindByEmailRequest*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::FindByEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::FindByEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::CreateRequest*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::UpdateRequest*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::GetRequest*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::UserReply*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::UserReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::UserReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::user::service::v1::UserStruct*
Arena::CreateMaybeMessage< ::htpp::user::service::v1::UserStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::user::service::v1::UserStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
