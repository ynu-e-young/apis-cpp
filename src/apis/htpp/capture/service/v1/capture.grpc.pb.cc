// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: apis/htpp/capture/service/v1/capture.proto

#include "apis/htpp/capture/service/v1/capture.pb.h"
#include "apis/htpp/capture/service/v1/capture.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace htpp {
namespace capture {
namespace service {
namespace v1 {

static const char* Capture_method_names[] = {
  "/htpp.capture.service.v1.Capture/ReadOne",
  "/htpp.capture.service.v1.Capture/ReadAll",
  "/htpp.capture.service.v1.Capture/ReadOneWithBinary",
  "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndSrc",
  "/htpp.capture.service.v1.Capture/ReadAllWithBinary",
  "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndSrc",
  "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndCalArea",
  "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndCalAreaAndSrc",
  "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndCalArea",
  "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndCalAreaAndSrc",
};

std::unique_ptr< Capture::Stub> Capture::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Capture::Stub> stub(new Capture::Stub(channel, options));
  return stub;
}

Capture::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReadOne_(Capture_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAll_(Capture_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinary_(Capture_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinaryAndSrc_(Capture_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinary_(Capture_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinaryAndSrc_(Capture_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinaryAndCalArea_(Capture_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadOneWithBinaryAndCalAreaAndSrc_(Capture_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinaryAndCalArea_(Capture_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadAllWithBinaryAndCalAreaAndSrc_(Capture_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Capture::Stub::ReadOne(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneRequest& request, ::htpp::capture::service::v1::ImageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadOneRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOne_, context, request, response);
}

void Capture::Stub::async::ReadOne(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneRequest* request, ::htpp::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadOneRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOne_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadOne(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneRequest* request, ::htpp::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOne_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageReply>* Capture::Stub::PrepareAsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImageReply, ::htpp::capture::service::v1::ReadOneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOne_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageReply>* Capture::Stub::AsyncReadOneRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadAll(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllRequest& request, ::htpp::capture::service::v1::ImagesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadAllRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAll_, context, request, response);
}

void Capture::Stub::async::ReadAll(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllRequest* request, ::htpp::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadAllRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadAll(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllRequest* request, ::htpp::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesReply>* Capture::Stub::PrepareAsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImagesReply, ::htpp::capture::service::v1::ReadAllRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesReply>* Capture::Stub::AsyncReadAllRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest& request, ::htpp::capture::service::v1::ImageReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinary_, context, request, response);
}

void Capture::Stub::async::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest* request, ::htpp::capture::service::v1::ImageReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinary_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadOneWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest* request, ::htpp::capture::service::v1::ImageReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageReply>* Capture::Stub::PrepareAsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImageReply, ::htpp::capture::service::v1::ReadOneWithBinaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageReply>* Capture::Stub::AsyncReadOneWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadOneWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest& request, ::htpp::capture::service::v1::ImageWithSrcReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImageWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinaryAndSrc_, context, request, response);
}

void Capture::Stub::async::ReadOneWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithSrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImageWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndSrc_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadOneWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithSrcReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithSrcReply>* Capture::Stub::PrepareAsyncReadOneWithBinaryAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImageWithSrcReply, ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinaryAndSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithSrcReply>* Capture::Stub::AsyncReadOneWithBinaryAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryAndSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest& request, ::htpp::capture::service::v1::ImagesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinary_, context, request, response);
}

void Capture::Stub::async::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest* request, ::htpp::capture::service::v1::ImagesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinary_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadAllWithBinary(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest* request, ::htpp::capture::service::v1::ImagesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesReply>* Capture::Stub::PrepareAsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImagesReply, ::htpp::capture::service::v1::ReadAllWithBinaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesReply>* Capture::Stub::AsyncReadAllWithBinaryRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadAllWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest& request, ::htpp::capture::service::v1::ImagesWithSrcReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImagesWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinaryAndSrc_, context, request, response);
}

void Capture::Stub::async::ReadAllWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithSrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImagesWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndSrc_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadAllWithBinaryAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithSrcReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithSrcReply>* Capture::Stub::PrepareAsyncReadAllWithBinaryAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImagesWithSrcReply, ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinaryAndSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithSrcReply>* Capture::Stub::AsyncReadAllWithBinaryAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryAndSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::htpp::capture::service::v1::ImageWithAreaReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response);
}

void Capture::Stub::async::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImageWithAreaReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadOneWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImageWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithAreaReply>* Capture::Stub::PrepareAsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImageWithAreaReply, ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinaryAndCalArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithAreaReply>* Capture::Stub::AsyncReadOneWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryAndCalAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadOneWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest& request, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadOneWithBinaryAndCalAreaAndSrc_, context, request, response);
}

void Capture::Stub::async::ReadOneWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalAreaAndSrc_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadOneWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadOneWithBinaryAndCalAreaAndSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithAreaAndSrcReply>* Capture::Stub::PrepareAsyncReadOneWithBinaryAndCalAreaAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImageWithAreaAndSrcReply, ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadOneWithBinaryAndCalAreaAndSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImageWithAreaAndSrcReply>* Capture::Stub::AsyncReadOneWithBinaryAndCalAreaAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadOneWithBinaryAndCalAreaAndSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::htpp::capture::service::v1::ImagesWithAreaReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response);
}

void Capture::Stub::async::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImagesWithAreaReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadAllWithBinaryAndCalArea(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImagesWithAreaReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithAreaReply>* Capture::Stub::PrepareAsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImagesWithAreaReply, ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinaryAndCalArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithAreaReply>* Capture::Stub::AsyncReadAllWithBinaryAndCalAreaRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryAndCalAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Capture::Stub::ReadAllWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest& request, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadAllWithBinaryAndCalAreaAndSrc_, context, request, response);
}

void Capture::Stub::async::ReadAllWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalAreaAndSrc_, context, request, response, std::move(f));
}

void Capture::Stub::async::ReadAllWithBinaryAndCalAreaAndSrc(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadAllWithBinaryAndCalAreaAndSrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply>* Capture::Stub::PrepareAsyncReadAllWithBinaryAndCalAreaAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadAllWithBinaryAndCalAreaAndSrc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply>* Capture::Stub::AsyncReadAllWithBinaryAndCalAreaAndSrcRaw(::grpc::ClientContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadAllWithBinaryAndCalAreaAndSrcRaw(context, request, cq);
  result->StartCall();
  return result;
}

Capture::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadOneRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadOneRequest* req,
             ::htpp::capture::service::v1::ImageReply* resp) {
               return service->ReadOne(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadAllRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadAllRequest* req,
             ::htpp::capture::service::v1::ImagesReply* resp) {
               return service->ReadAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadOneWithBinaryRequest, ::htpp::capture::service::v1::ImageReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadOneWithBinaryRequest* req,
             ::htpp::capture::service::v1::ImageReply* resp) {
               return service->ReadOneWithBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImageWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest* req,
             ::htpp::capture::service::v1::ImageWithSrcReply* resp) {
               return service->ReadOneWithBinaryAndSrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadAllWithBinaryRequest, ::htpp::capture::service::v1::ImagesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadAllWithBinaryRequest* req,
             ::htpp::capture::service::v1::ImagesReply* resp) {
               return service->ReadAllWithBinary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest, ::htpp::capture::service::v1::ImagesWithSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest* req,
             ::htpp::capture::service::v1::ImagesWithSrcReply* resp) {
               return service->ReadAllWithBinaryAndSrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImageWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* req,
             ::htpp::capture::service::v1::ImageWithAreaReply* resp) {
               return service->ReadOneWithBinaryAndCalArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest* req,
             ::htpp::capture::service::v1::ImageWithAreaAndSrcReply* resp) {
               return service->ReadOneWithBinaryAndCalAreaAndSrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, ::htpp::capture::service::v1::ImagesWithAreaReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* req,
             ::htpp::capture::service::v1::ImagesWithAreaReply* resp) {
               return service->ReadAllWithBinaryAndCalArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Capture_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Capture::Service, ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Capture::Service* service,
             ::grpc::ServerContext* ctx,
             const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest* req,
             ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply* resp) {
               return service->ReadAllWithBinaryAndCalAreaAndSrc(ctx, req, resp);
             }, this)));
}

Capture::Service::~Service() {
}

::grpc::Status Capture::Service::ReadOne(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadOneRequest* request, ::htpp::capture::service::v1::ImageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadAll(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadAllRequest* request, ::htpp::capture::service::v1::ImagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadOneWithBinary(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryRequest* request, ::htpp::capture::service::v1::ImageReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadOneWithBinaryAndSrc(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithSrcReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadAllWithBinary(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryRequest* request, ::htpp::capture::service::v1::ImagesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadAllWithBinaryAndSrc(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithSrcReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadOneWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImageWithAreaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadOneWithBinaryAndCalAreaAndSrc(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImageWithAreaAndSrcReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadAllWithBinaryAndCalArea(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest* request, ::htpp::capture::service::v1::ImagesWithAreaReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Capture::Service::ReadAllWithBinaryAndCalAreaAndSrc(::grpc::ServerContext* context, const ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest* request, ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace htpp
}  // namespace capture
}  // namespace service
}  // namespace v1

