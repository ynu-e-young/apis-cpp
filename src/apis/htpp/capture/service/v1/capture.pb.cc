// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apis/htpp/capture/service/v1/capture.proto

#include "apis/htpp/capture/service/v1/capture.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace htpp {
namespace capture {
namespace service {
namespace v1 {
PROTOBUF_CONSTEXPR ReadOneRequest::ReadOneRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadOneRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadOneRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadOneRequestDefaultTypeInternal() {}
  union {
    ReadOneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadOneRequestDefaultTypeInternal _ReadOneRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadAllRequest::ReadAllRequest(
    ::_pbi::ConstantInitialized) {}
struct ReadAllRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadAllRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadAllRequestDefaultTypeInternal() {}
  union {
    ReadAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadAllRequestDefaultTypeInternal _ReadAllRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadOneWithBinaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadOneWithBinaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadOneWithBinaryRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadOneWithBinaryRequestDefaultTypeInternal _ReadOneWithBinaryRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadOneWithBinaryAndSrcRequest::ReadOneWithBinaryAndSrcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadOneWithBinaryAndSrcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadOneWithBinaryAndSrcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadOneWithBinaryAndSrcRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryAndSrcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadOneWithBinaryAndSrcRequestDefaultTypeInternal _ReadOneWithBinaryAndSrcRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(
    ::_pbi::ConstantInitialized) {}
struct ReadAllWithBinaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadAllWithBinaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadAllWithBinaryRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadAllWithBinaryRequestDefaultTypeInternal _ReadAllWithBinaryRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadAllWithBinaryAndSrcRequest::ReadAllWithBinaryAndSrcRequest(
    ::_pbi::ConstantInitialized) {}
struct ReadAllWithBinaryAndSrcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadAllWithBinaryAndSrcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadAllWithBinaryAndSrcRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryAndSrcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadAllWithBinaryAndSrcRequestDefaultTypeInternal _ReadAllWithBinaryAndSrcRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryAndCalAreaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadOneWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadOneWithBinaryAndCalAreaRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadOneWithBinaryAndCalAreaAndSrcRequest::ReadOneWithBinaryAndCalAreaAndSrcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReadOneWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadOneWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadOneWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal() {}
  union {
    ReadOneWithBinaryAndCalAreaAndSrcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadOneWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal _ReadOneWithBinaryAndCalAreaAndSrcRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(
    ::_pbi::ConstantInitialized) {}
struct ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryAndCalAreaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadAllWithBinaryAndCalAreaRequestDefaultTypeInternal _ReadAllWithBinaryAndCalAreaRequest_default_instance_;
PROTOBUF_CONSTEXPR ReadAllWithBinaryAndCalAreaAndSrcRequest::ReadAllWithBinaryAndCalAreaAndSrcRequest(
    ::_pbi::ConstantInitialized) {}
struct ReadAllWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadAllWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadAllWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal() {}
  union {
    ReadAllWithBinaryAndCalAreaAndSrcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadAllWithBinaryAndCalAreaAndSrcRequestDefaultTypeInternal _ReadAllWithBinaryAndCalAreaAndSrcRequest_default_instance_;
PROTOBUF_CONSTEXPR ImageReply::ImageReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageReplyDefaultTypeInternal() {}
  union {
    ImageReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageReplyDefaultTypeInternal _ImageReply_default_instance_;
PROTOBUF_CONSTEXPR ImageWithSrcReply::ImageWithSrcReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_src_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageWithSrcReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageWithSrcReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageWithSrcReplyDefaultTypeInternal() {}
  union {
    ImageWithSrcReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageWithSrcReplyDefaultTypeInternal _ImageWithSrcReply_default_instance_;
PROTOBUF_CONSTEXPR ImagesReply::ImagesReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.images_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesReplyDefaultTypeInternal() {}
  union {
    ImagesReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesReplyDefaultTypeInternal _ImagesReply_default_instance_;
PROTOBUF_CONSTEXPR ImagesWithSrcReply::ImagesWithSrcReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_src_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesWithSrcReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesWithSrcReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesWithSrcReplyDefaultTypeInternal() {}
  union {
    ImagesWithSrcReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesWithSrcReplyDefaultTypeInternal _ImagesWithSrcReply_default_instance_;
PROTOBUF_CONSTEXPR ImageWithAreaReply::ImageWithAreaReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.pixels_)*/int64_t{0}
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageWithAreaReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageWithAreaReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageWithAreaReplyDefaultTypeInternal() {}
  union {
    ImageWithAreaReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageWithAreaReplyDefaultTypeInternal _ImageWithAreaReply_default_instance_;
PROTOBUF_CONSTEXPR ImageWithAreaAndSrcReply::ImageWithAreaAndSrcReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_src_)*/nullptr
  , /*decltype(_impl_.pixels_)*/int64_t{0}
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageWithAreaAndSrcReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageWithAreaAndSrcReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageWithAreaAndSrcReplyDefaultTypeInternal() {}
  union {
    ImageWithAreaAndSrcReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageWithAreaAndSrcReplyDefaultTypeInternal _ImageWithAreaAndSrcReply_default_instance_;
PROTOBUF_CONSTEXPR ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.pixels_)*/int64_t{0}
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesWithAreaReply_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesWithAreaReply_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesWithAreaReply_DataDefaultTypeInternal() {}
  union {
    ImagesWithAreaReply_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesWithAreaReply_DataDefaultTypeInternal _ImagesWithAreaReply_Data_default_instance_;
PROTOBUF_CONSTEXPR ImagesWithAreaReply::ImagesWithAreaReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesWithAreaReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesWithAreaReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesWithAreaReplyDefaultTypeInternal() {}
  union {
    ImagesWithAreaReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesWithAreaReplyDefaultTypeInternal _ImagesWithAreaReply_default_instance_;
PROTOBUF_CONSTEXPR ImagesWithAreaAndSrcReply_Data::ImagesWithAreaAndSrcReply_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_src_)*/nullptr
  , /*decltype(_impl_.pixels_)*/int64_t{0}
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesWithAreaAndSrcReply_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesWithAreaAndSrcReply_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesWithAreaAndSrcReply_DataDefaultTypeInternal() {}
  union {
    ImagesWithAreaAndSrcReply_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesWithAreaAndSrcReply_DataDefaultTypeInternal _ImagesWithAreaAndSrcReply_Data_default_instance_;
PROTOBUF_CONSTEXPR ImagesWithAreaAndSrcReply::ImagesWithAreaAndSrcReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImagesWithAreaAndSrcReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImagesWithAreaAndSrcReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImagesWithAreaAndSrcReplyDefaultTypeInternal() {}
  union {
    ImagesWithAreaAndSrcReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImagesWithAreaAndSrcReplyDefaultTypeInternal _ImagesWithAreaAndSrcReply_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR ImageSrc::ImageSrc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.src_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageSrcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageSrcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageSrcDefaultTypeInternal() {}
  union {
    ImageSrc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageSrcDefaultTypeInternal _ImageSrc_default_instance_;
}  // namespace v1
}  // namespace service
}  // namespace capture
}  // namespace htpp
static ::_pb::Metadata file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto = nullptr;

const uint32_t TableStruct_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadAllWithBinaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageReply, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithSrcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithSrcReply, _impl_.image_src_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesReply, _impl_.images_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithSrcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithSrcReply, _impl_.image_src_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaReply, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaReply, _impl_.pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaReply, _impl_.area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaAndSrcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaAndSrcReply, _impl_.image_src_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaAndSrcReply, _impl_.pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageWithAreaAndSrcReply, _impl_.area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply_Data, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply_Data, _impl_.pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply_Data, _impl_.area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaReply, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data, _impl_.image_src_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data, _impl_.pixels_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data, _impl_.area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::Image, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageSrc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageSrc, _impl_.proc_),
  PROTOBUF_FIELD_OFFSET(::htpp::capture::service::v1::ImageSrc, _impl_.src_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::htpp::capture::service::v1::ReadOneRequest)},
  { 7, -1, -1, sizeof(::htpp::capture::service::v1::ReadAllRequest)},
  { 13, -1, -1, sizeof(::htpp::capture::service::v1::ReadOneWithBinaryRequest)},
  { 20, -1, -1, sizeof(::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest)},
  { 27, -1, -1, sizeof(::htpp::capture::service::v1::ReadAllWithBinaryRequest)},
  { 33, -1, -1, sizeof(::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest)},
  { 39, -1, -1, sizeof(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest)},
  { 46, -1, -1, sizeof(::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest)},
  { 53, -1, -1, sizeof(::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest)},
  { 59, -1, -1, sizeof(::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest)},
  { 65, -1, -1, sizeof(::htpp::capture::service::v1::ImageReply)},
  { 72, -1, -1, sizeof(::htpp::capture::service::v1::ImageWithSrcReply)},
  { 79, -1, -1, sizeof(::htpp::capture::service::v1::ImagesReply)},
  { 86, -1, -1, sizeof(::htpp::capture::service::v1::ImagesWithSrcReply)},
  { 93, -1, -1, sizeof(::htpp::capture::service::v1::ImageWithAreaReply)},
  { 102, -1, -1, sizeof(::htpp::capture::service::v1::ImageWithAreaAndSrcReply)},
  { 111, -1, -1, sizeof(::htpp::capture::service::v1::ImagesWithAreaReply_Data)},
  { 120, -1, -1, sizeof(::htpp::capture::service::v1::ImagesWithAreaReply)},
  { 127, -1, -1, sizeof(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data)},
  { 136, -1, -1, sizeof(::htpp::capture::service::v1::ImagesWithAreaAndSrcReply)},
  { 143, -1, -1, sizeof(::htpp::capture::service::v1::Image)},
  { 150, -1, -1, sizeof(::htpp::capture::service::v1::ImageSrc)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::htpp::capture::service::v1::_ReadOneRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadAllRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadOneWithBinaryRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadOneWithBinaryAndSrcRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadAllWithBinaryRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadAllWithBinaryAndSrcRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadOneWithBinaryAndCalAreaRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadOneWithBinaryAndCalAreaAndSrcRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadAllWithBinaryAndCalAreaRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ReadAllWithBinaryAndCalAreaAndSrcRequest_default_instance_._instance,
  &::htpp::capture::service::v1::_ImageReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImageWithSrcReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesWithSrcReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImageWithAreaReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImageWithAreaAndSrcReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesWithAreaReply_Data_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesWithAreaReply_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesWithAreaAndSrcReply_Data_default_instance_._instance,
  &::htpp::capture::service::v1::_ImagesWithAreaAndSrcReply_default_instance_._instance,
  &::htpp::capture::service::v1::_Image_default_instance_._instance,
  &::htpp::capture::service::v1::_ImageSrc_default_instance_._instance,
};

const char descriptor_table_protodef_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*apis/htpp/capture/service/v1/capture.p"
  "roto\022\027htpp.capture.service.v1\" \n\016ReadOne"
  "Request\022\016\n\002id\030\001 \001(\003R\002id\"\020\n\016ReadAllReques"
  "t\"*\n\030ReadOneWithBinaryRequest\022\016\n\002id\030\001 \001("
  "\003R\002id\"0\n\036ReadOneWithBinaryAndSrcRequest\022"
  "\016\n\002id\030\001 \001(\003R\002id\"\032\n\030ReadAllWithBinaryRequ"
  "est\" \n\036ReadAllWithBinaryAndSrcRequest\"4\n"
  "\"ReadOneWithBinaryAndCalAreaRequest\022\016\n\002i"
  "d\030\001 \001(\003R\002id\":\n(ReadOneWithBinaryAndCalAr"
  "eaAndSrcRequest\022\016\n\002id\030\001 \001(\003R\002id\"$\n\"ReadA"
  "llWithBinaryAndCalAreaRequest\"*\n(ReadAll"
  "WithBinaryAndCalAreaAndSrcRequest\"B\n\nIma"
  "geReply\0224\n\005image\030\001 \001(\0132\036.htpp.capture.se"
  "rvice.v1.ImageR\005image\"S\n\021ImageWithSrcRep"
  "ly\022>\n\timage_src\030\001 \001(\0132!.htpp.capture.ser"
  "vice.v1.ImageSrcR\010imageSrc\"E\n\013ImagesRepl"
  "y\0226\n\006images\030\001 \003(\0132\036.htpp.capture.service"
  ".v1.ImageR\006images\"T\n\022ImagesWithSrcReply\022"
  ">\n\timage_src\030\001 \003(\0132!.htpp.capture.servic"
  "e.v1.ImageSrcR\010imageSrc\"v\n\022ImageWithArea"
  "Reply\0224\n\005image\030\001 \001(\0132\036.htpp.capture.serv"
  "ice.v1.ImageR\005image\022\026\n\006pixels\030\002 \001(\003R\006pix"
  "els\022\022\n\004area\030\003 \001(\001R\004area\"\206\001\n\030ImageWithAre"
  "aAndSrcReply\022>\n\timage_src\030\001 \001(\0132!.htpp.c"
  "apture.service.v1.ImageSrcR\010imageSrc\022\026\n\006"
  "pixels\030\002 \001(\003R\006pixels\022\022\n\004area\030\003 \001(\001R\004area"
  "\"\306\001\n\023ImagesWithAreaReply\022E\n\004data\030\001 \003(\01321"
  ".htpp.capture.service.v1.ImagesWithAreaR"
  "eply.DataR\004data\032h\n\004Data\0224\n\005image\030\001 \001(\0132\036"
  ".htpp.capture.service.v1.ImageR\005image\022\026\n"
  "\006pixels\030\002 \001(\003R\006pixels\022\022\n\004area\030\003 \001(\001R\004are"
  "a\"\334\001\n\031ImagesWithAreaAndSrcReply\022K\n\004data\030"
  "\001 \003(\01327.htpp.capture.service.v1.ImagesWi"
  "thAreaAndSrcReply.DataR\004data\032r\n\004Data\022>\n\t"
  "image_src\030\001 \001(\0132!.htpp.capture.service.v"
  "1.ImageSrcR\010imageSrc\022\026\n\006pixels\030\002 \001(\003R\006pi"
  "xels\022\022\n\004area\030\003 \001(\001R\004area\"\033\n\005Image\022\022\n\004dat"
  "a\030\001 \001(\014R\004data\"0\n\010ImageSrc\022\022\n\004proc\030\001 \001(\014R"
  "\004proc\022\020\n\003src\030\002 \001(\014R\003src2\374\t\n\007Capture\022Y\n\007R"
  "eadOne\022\'.htpp.capture.service.v1.ReadOne"
  "Request\032#.htpp.capture.service.v1.ImageR"
  "eply\"\000\022Z\n\007ReadAll\022\'.htpp.capture.service"
  ".v1.ReadAllRequest\032$.htpp.capture.servic"
  "e.v1.ImagesReply\"\000\022m\n\021ReadOneWithBinary\022"
  "1.htpp.capture.service.v1.ReadOneWithBin"
  "aryRequest\032#.htpp.capture.service.v1.Ima"
  "geReply\"\000\022\200\001\n\027ReadOneWithBinaryAndSrc\0227."
  "htpp.capture.service.v1.ReadOneWithBinar"
  "yAndSrcRequest\032*.htpp.capture.service.v1"
  ".ImageWithSrcReply\"\000\022n\n\021ReadAllWithBinar"
  "y\0221.htpp.capture.service.v1.ReadAllWithB"
  "inaryRequest\032$.htpp.capture.service.v1.I"
  "magesReply\"\000\022\201\001\n\027ReadAllWithBinaryAndSrc"
  "\0227.htpp.capture.service.v1.ReadAllWithBi"
  "naryAndSrcRequest\032+.htpp.capture.service"
  ".v1.ImagesWithSrcReply\"\000\022\211\001\n\033ReadOneWith"
  "BinaryAndCalArea\022;.htpp.capture.service."
  "v1.ReadOneWithBinaryAndCalAreaRequest\032+."
  "htpp.capture.service.v1.ImageWithAreaRep"
  "ly\"\000\022\233\001\n!ReadOneWithBinaryAndCalAreaAndS"
  "rc\022A.htpp.capture.service.v1.ReadOneWith"
  "BinaryAndCalAreaAndSrcRequest\0321.htpp.cap"
  "ture.service.v1.ImageWithAreaAndSrcReply"
  "\"\000\022\212\001\n\033ReadAllWithBinaryAndCalArea\022;.htp"
  "p.capture.service.v1.ReadAllWithBinaryAn"
  "dCalAreaRequest\032,.htpp.capture.service.v"
  "1.ImagesWithAreaReply\"\000\022\234\001\n!ReadAllWithB"
  "inaryAndCalAreaAndSrc\022A.htpp.capture.ser"
  "vice.v1.ReadAllWithBinaryAndCalAreaAndSr"
  "cRequest\0322.htpp.capture.service.v1.Image"
  "sWithAreaAndSrcReply\"\000B\036P\001Z\032htpp/capture"
  "/service/v1;v1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto = {
    false, false, 2862, descriptor_table_protodef_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto,
    "apis/htpp/capture/service/v1/capture.proto",
    &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once, nullptr, 0, 22,
    schemas, file_default_instances, TableStruct_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto::offsets,
    file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto, file_level_enum_descriptors_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto,
    file_level_service_descriptors_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter() {
  return &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto(&descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto);
namespace htpp {
namespace capture {
namespace service {
namespace v1 {

// ===================================================================

class ReadOneRequest::_Internal {
 public:
};

ReadOneRequest::ReadOneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadOneRequest)
}
ReadOneRequest::ReadOneRequest(const ReadOneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadOneRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadOneRequest)
}

inline void ReadOneRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadOneRequest::~ReadOneRequest() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ReadOneRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadOneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadOneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ReadOneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ReadOneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ReadOneRequest)
  return target;
}

size_t ReadOneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ReadOneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadOneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneRequest::GetClassData() const { return &_class_data_; }


void ReadOneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadOneRequest*>(&to_msg);
  auto& from = static_cast<const ReadOneRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ReadOneRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneRequest::CopyFrom(const ReadOneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ReadOneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneRequest::IsInitialized() const {
  return true;
}

void ReadOneRequest::InternalSwap(ReadOneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[0]);
}

// ===================================================================

class ReadAllRequest::_Internal {
 public:
};

ReadAllRequest::ReadAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadAllRequest)
}
ReadAllRequest::ReadAllRequest(const ReadAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadAllRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadAllRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[1]);
}

// ===================================================================

class ReadOneWithBinaryRequest::_Internal {
 public:
};

ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadOneWithBinaryRequest)
}
ReadOneWithBinaryRequest::ReadOneWithBinaryRequest(const ReadOneWithBinaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadOneWithBinaryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadOneWithBinaryRequest)
}

inline void ReadOneWithBinaryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadOneWithBinaryRequest::~ReadOneWithBinaryRequest() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadOneWithBinaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadOneWithBinaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  return target;
}

size_t ReadOneWithBinaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadOneWithBinaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryRequest::GetClassData() const { return &_class_data_; }


void ReadOneWithBinaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadOneWithBinaryRequest*>(&to_msg);
  auto& from = static_cast<const ReadOneWithBinaryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryRequest::CopyFrom(const ReadOneWithBinaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ReadOneWithBinaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryRequest::InternalSwap(ReadOneWithBinaryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[2]);
}

// ===================================================================

class ReadOneWithBinaryAndSrcRequest::_Internal {
 public:
};

ReadOneWithBinaryAndSrcRequest::ReadOneWithBinaryAndSrcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
}
ReadOneWithBinaryAndSrcRequest::ReadOneWithBinaryAndSrcRequest(const ReadOneWithBinaryAndSrcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadOneWithBinaryAndSrcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
}

inline void ReadOneWithBinaryAndSrcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadOneWithBinaryAndSrcRequest::~ReadOneWithBinaryAndSrcRequest() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadOneWithBinaryAndSrcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryAndSrcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadOneWithBinaryAndSrcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryAndSrcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryAndSrcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  return target;
}

size_t ReadOneWithBinaryAndSrcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryAndSrcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadOneWithBinaryAndSrcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryAndSrcRequest::GetClassData() const { return &_class_data_; }


void ReadOneWithBinaryAndSrcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadOneWithBinaryAndSrcRequest*>(&to_msg);
  auto& from = static_cast<const ReadOneWithBinaryAndSrcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryAndSrcRequest::CopyFrom(const ReadOneWithBinaryAndSrcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndSrcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryAndSrcRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryAndSrcRequest::InternalSwap(ReadOneWithBinaryAndSrcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryAndSrcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[3]);
}

// ===================================================================

class ReadAllWithBinaryRequest::_Internal {
 public:
};

ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadAllWithBinaryRequest)
}
ReadAllWithBinaryRequest::ReadAllWithBinaryRequest(const ReadAllWithBinaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadAllWithBinaryRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadAllWithBinaryRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[4]);
}

// ===================================================================

class ReadAllWithBinaryAndSrcRequest::_Internal {
 public:
};

ReadAllWithBinaryAndSrcRequest::ReadAllWithBinaryAndSrcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndSrcRequest)
}
ReadAllWithBinaryAndSrcRequest::ReadAllWithBinaryAndSrcRequest(const ReadAllWithBinaryAndSrcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadAllWithBinaryAndSrcRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndSrcRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryAndSrcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryAndSrcRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryAndSrcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[5]);
}

// ===================================================================

class ReadOneWithBinaryAndCalAreaRequest::_Internal {
 public:
};

ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
}
ReadOneWithBinaryAndCalAreaRequest::ReadOneWithBinaryAndCalAreaRequest(const ReadOneWithBinaryAndCalAreaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadOneWithBinaryAndCalAreaRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
}

inline void ReadOneWithBinaryAndCalAreaRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadOneWithBinaryAndCalAreaRequest::~ReadOneWithBinaryAndCalAreaRequest() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadOneWithBinaryAndCalAreaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryAndCalAreaRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadOneWithBinaryAndCalAreaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryAndCalAreaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryAndCalAreaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  return target;
}

size_t ReadOneWithBinaryAndCalAreaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryAndCalAreaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadOneWithBinaryAndCalAreaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryAndCalAreaRequest::GetClassData() const { return &_class_data_; }


void ReadOneWithBinaryAndCalAreaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadOneWithBinaryAndCalAreaRequest*>(&to_msg);
  auto& from = static_cast<const ReadOneWithBinaryAndCalAreaRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryAndCalAreaRequest::CopyFrom(const ReadOneWithBinaryAndCalAreaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryAndCalAreaRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryAndCalAreaRequest::InternalSwap(ReadOneWithBinaryAndCalAreaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryAndCalAreaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[6]);
}

// ===================================================================

class ReadOneWithBinaryAndCalAreaAndSrcRequest::_Internal {
 public:
};

ReadOneWithBinaryAndCalAreaAndSrcRequest::ReadOneWithBinaryAndCalAreaAndSrcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
}
ReadOneWithBinaryAndCalAreaAndSrcRequest::ReadOneWithBinaryAndCalAreaAndSrcRequest(const ReadOneWithBinaryAndCalAreaAndSrcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReadOneWithBinaryAndCalAreaAndSrcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
}

inline void ReadOneWithBinaryAndCalAreaAndSrcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReadOneWithBinaryAndCalAreaAndSrcRequest::~ReadOneWithBinaryAndCalAreaAndSrcRequest() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReadOneWithBinaryAndCalAreaAndSrcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReadOneWithBinaryAndCalAreaAndSrcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReadOneWithBinaryAndCalAreaAndSrcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadOneWithBinaryAndCalAreaAndSrcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReadOneWithBinaryAndCalAreaAndSrcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  return target;
}

size_t ReadOneWithBinaryAndCalAreaAndSrcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadOneWithBinaryAndCalAreaAndSrcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReadOneWithBinaryAndCalAreaAndSrcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadOneWithBinaryAndCalAreaAndSrcRequest::GetClassData() const { return &_class_data_; }


void ReadOneWithBinaryAndCalAreaAndSrcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReadOneWithBinaryAndCalAreaAndSrcRequest*>(&to_msg);
  auto& from = static_cast<const ReadOneWithBinaryAndCalAreaAndSrcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReadOneWithBinaryAndCalAreaAndSrcRequest::CopyFrom(const ReadOneWithBinaryAndCalAreaAndSrcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ReadOneWithBinaryAndCalAreaAndSrcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadOneWithBinaryAndCalAreaAndSrcRequest::IsInitialized() const {
  return true;
}

void ReadOneWithBinaryAndCalAreaAndSrcRequest::InternalSwap(ReadOneWithBinaryAndCalAreaAndSrcRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadOneWithBinaryAndCalAreaAndSrcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[7]);
}

// ===================================================================

class ReadAllWithBinaryAndCalAreaRequest::_Internal {
 public:
};

ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndCalAreaRequest)
}
ReadAllWithBinaryAndCalAreaRequest::ReadAllWithBinaryAndCalAreaRequest(const ReadAllWithBinaryAndCalAreaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadAllWithBinaryAndCalAreaRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndCalAreaRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryAndCalAreaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryAndCalAreaRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryAndCalAreaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[8]);
}

// ===================================================================

class ReadAllWithBinaryAndCalAreaAndSrcRequest::_Internal {
 public:
};

ReadAllWithBinaryAndCalAreaAndSrcRequest::ReadAllWithBinaryAndCalAreaAndSrcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndCalAreaAndSrcRequest)
}
ReadAllWithBinaryAndCalAreaAndSrcRequest::ReadAllWithBinaryAndCalAreaAndSrcRequest(const ReadAllWithBinaryAndCalAreaAndSrcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReadAllWithBinaryAndCalAreaAndSrcRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ReadAllWithBinaryAndCalAreaAndSrcRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReadAllWithBinaryAndCalAreaAndSrcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReadAllWithBinaryAndCalAreaAndSrcRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReadAllWithBinaryAndCalAreaAndSrcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[9]);
}

// ===================================================================

class ImageReply::_Internal {
 public:
  static const ::htpp::capture::service::v1::Image& image(const ImageReply* msg);
};

const ::htpp::capture::service::v1::Image&
ImageReply::_Internal::image(const ImageReply* msg) {
  return *msg->_impl_.image_;
}
ImageReply::ImageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImageReply)
}
ImageReply::ImageReply(const ImageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::htpp::capture::service::v1::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImageReply)
}

inline void ImageReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImageReply::~ImageReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImageReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ImageReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImageReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImageReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImageReply)
  return target;
}

size_t ImageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImageReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageReply::GetClassData() const { return &_class_data_; }


void ImageReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageReply*>(&to_msg);
  auto& from = static_cast<const ImageReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImageReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::htpp::capture::service::v1::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageReply::CopyFrom(const ImageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageReply::IsInitialized() const {
  return true;
}

void ImageReply::InternalSwap(ImageReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[10]);
}

// ===================================================================

class ImageWithSrcReply::_Internal {
 public:
  static const ::htpp::capture::service::v1::ImageSrc& image_src(const ImageWithSrcReply* msg);
};

const ::htpp::capture::service::v1::ImageSrc&
ImageWithSrcReply::_Internal::image_src(const ImageWithSrcReply* msg) {
  return *msg->_impl_.image_src_;
}
ImageWithSrcReply::ImageWithSrcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImageWithSrcReply)
}
ImageWithSrcReply::ImageWithSrcReply(const ImageWithSrcReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageWithSrcReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_src()) {
    _this->_impl_.image_src_ = new ::htpp::capture::service::v1::ImageSrc(*from._impl_.image_src_);
  }
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImageWithSrcReply)
}

inline void ImageWithSrcReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImageWithSrcReply::~ImageWithSrcReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImageWithSrcReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageWithSrcReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_src_;
}

void ImageWithSrcReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageWithSrcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImageWithSrcReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_src_ != nullptr) {
    delete _impl_.image_src_;
  }
  _impl_.image_src_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageWithSrcReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageWithSrcReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImageWithSrcReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image_src(this),
        _Internal::image_src(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImageWithSrcReply)
  return target;
}

size_t ImageWithSrcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImageWithSrcReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_src_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageWithSrcReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageWithSrcReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageWithSrcReply::GetClassData() const { return &_class_data_; }


void ImageWithSrcReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageWithSrcReply*>(&to_msg);
  auto& from = static_cast<const ImageWithSrcReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImageWithSrcReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image_src()) {
    _this->_internal_mutable_image_src()->::htpp::capture::service::v1::ImageSrc::MergeFrom(
        from._internal_image_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageWithSrcReply::CopyFrom(const ImageWithSrcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImageWithSrcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageWithSrcReply::IsInitialized() const {
  return true;
}

void ImageWithSrcReply::InternalSwap(ImageWithSrcReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_src_, other->_impl_.image_src_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageWithSrcReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[11]);
}

// ===================================================================

class ImagesReply::_Internal {
 public:
};

ImagesReply::ImagesReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesReply)
}
ImagesReply::ImagesReply(const ImagesReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){from._impl_.images_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesReply)
}

inline void ImagesReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.images_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesReply::~ImagesReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.images_.~RepeatedPtrField();
}

void ImagesReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.images_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.capture.service.v1.Image images = 1 [json_name = "images"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_images(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.Image images = 1 [json_name = "images"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_images_size()); i < n; i++) {
    const auto& repfield = this->_internal_images(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesReply)
  return target;
}

size_t ImagesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.Image images = 1 [json_name = "images"];
  total_size += 1UL * this->_internal_images_size();
  for (const auto& msg : this->_impl_.images_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesReply::GetClassData() const { return &_class_data_; }


void ImagesReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesReply*>(&to_msg);
  auto& from = static_cast<const ImagesReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.images_.MergeFrom(from._impl_.images_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesReply::CopyFrom(const ImagesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesReply::IsInitialized() const {
  return true;
}

void ImagesReply::InternalSwap(ImagesReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.images_.InternalSwap(&other->_impl_.images_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[12]);
}

// ===================================================================

class ImagesWithSrcReply::_Internal {
 public:
};

ImagesWithSrcReply::ImagesWithSrcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesWithSrcReply)
}
ImagesWithSrcReply::ImagesWithSrcReply(const ImagesWithSrcReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesWithSrcReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){from._impl_.image_src_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesWithSrcReply)
}

inline void ImagesWithSrcReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesWithSrcReply::~ImagesWithSrcReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesWithSrcReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesWithSrcReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_src_.~RepeatedPtrField();
}

void ImagesWithSrcReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesWithSrcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesWithSrcReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_src_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithSrcReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_src(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithSrcReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesWithSrcReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_src_size()); i < n; i++) {
    const auto& repfield = this->_internal_image_src(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesWithSrcReply)
  return target;
}

size_t ImagesWithSrcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesWithSrcReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  total_size += 1UL * this->_internal_image_src_size();
  for (const auto& msg : this->_impl_.image_src_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithSrcReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesWithSrcReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithSrcReply::GetClassData() const { return &_class_data_; }


void ImagesWithSrcReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesWithSrcReply*>(&to_msg);
  auto& from = static_cast<const ImagesWithSrcReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesWithSrcReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_src_.MergeFrom(from._impl_.image_src_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithSrcReply::CopyFrom(const ImagesWithSrcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesWithSrcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithSrcReply::IsInitialized() const {
  return true;
}

void ImagesWithSrcReply::InternalSwap(ImagesWithSrcReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.image_src_.InternalSwap(&other->_impl_.image_src_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithSrcReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[13]);
}

// ===================================================================

class ImageWithAreaReply::_Internal {
 public:
  static const ::htpp::capture::service::v1::Image& image(const ImageWithAreaReply* msg);
};

const ::htpp::capture::service::v1::Image&
ImageWithAreaReply::_Internal::image(const ImageWithAreaReply* msg) {
  return *msg->_impl_.image_;
}
ImageWithAreaReply::ImageWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImageWithAreaReply)
}
ImageWithAreaReply::ImageWithAreaReply(const ImageWithAreaReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageWithAreaReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , decltype(_impl_.pixels_){}
    , decltype(_impl_.area_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::htpp::capture::service::v1::Image(*from._impl_.image_);
  }
  ::memcpy(&_impl_.pixels_, &from._impl_.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.area_) -
    reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImageWithAreaReply)
}

inline void ImageWithAreaReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , decltype(_impl_.pixels_){int64_t{0}}
    , decltype(_impl_.area_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImageWithAreaReply::~ImageWithAreaReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImageWithAreaReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageWithAreaReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ImageWithAreaReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageWithAreaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImageWithAreaReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  ::memset(&_impl_.pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.area_) -
      reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageWithAreaReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2 [json_name = "pixels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3 [json_name = "area"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageWithAreaReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImageWithAreaReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImageWithAreaReply)
  return target;
}

size_t ImageWithAreaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImageWithAreaReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageWithAreaReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageWithAreaReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageWithAreaReply::GetClassData() const { return &_class_data_; }


void ImageWithAreaReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageWithAreaReply*>(&to_msg);
  auto& from = static_cast<const ImageWithAreaReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImageWithAreaReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::htpp::capture::service::v1::Image::MergeFrom(
        from._internal_image());
  }
  if (from._internal_pixels() != 0) {
    _this->_internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageWithAreaReply::CopyFrom(const ImageWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImageWithAreaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageWithAreaReply::IsInitialized() const {
  return true;
}

void ImageWithAreaReply::InternalSwap(ImageWithAreaReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageWithAreaReply, _impl_.area_)
      + sizeof(ImageWithAreaReply::_impl_.area_)
      - PROTOBUF_FIELD_OFFSET(ImageWithAreaReply, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageWithAreaReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[14]);
}

// ===================================================================

class ImageWithAreaAndSrcReply::_Internal {
 public:
  static const ::htpp::capture::service::v1::ImageSrc& image_src(const ImageWithAreaAndSrcReply* msg);
};

const ::htpp::capture::service::v1::ImageSrc&
ImageWithAreaAndSrcReply::_Internal::image_src(const ImageWithAreaAndSrcReply* msg) {
  return *msg->_impl_.image_src_;
}
ImageWithAreaAndSrcReply::ImageWithAreaAndSrcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
}
ImageWithAreaAndSrcReply::ImageWithAreaAndSrcReply(const ImageWithAreaAndSrcReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageWithAreaAndSrcReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , decltype(_impl_.pixels_){}
    , decltype(_impl_.area_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_src()) {
    _this->_impl_.image_src_ = new ::htpp::capture::service::v1::ImageSrc(*from._impl_.image_src_);
  }
  ::memcpy(&_impl_.pixels_, &from._impl_.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.area_) -
    reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
}

inline void ImageWithAreaAndSrcReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , decltype(_impl_.pixels_){int64_t{0}}
    , decltype(_impl_.area_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImageWithAreaAndSrcReply::~ImageWithAreaAndSrcReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageWithAreaAndSrcReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_src_;
}

void ImageWithAreaAndSrcReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageWithAreaAndSrcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_src_ != nullptr) {
    delete _impl_.image_src_;
  }
  _impl_.image_src_ = nullptr;
  ::memset(&_impl_.pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.area_) -
      reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageWithAreaAndSrcReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2 [json_name = "pixels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3 [json_name = "area"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageWithAreaAndSrcReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image_src(this),
        _Internal::image_src(this).GetCachedSize(), target, stream);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  return target;
}

size_t ImageWithAreaAndSrcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_src_);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageWithAreaAndSrcReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageWithAreaAndSrcReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageWithAreaAndSrcReply::GetClassData() const { return &_class_data_; }


void ImageWithAreaAndSrcReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageWithAreaAndSrcReply*>(&to_msg);
  auto& from = static_cast<const ImageWithAreaAndSrcReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image_src()) {
    _this->_internal_mutable_image_src()->::htpp::capture::service::v1::ImageSrc::MergeFrom(
        from._internal_image_src());
  }
  if (from._internal_pixels() != 0) {
    _this->_internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageWithAreaAndSrcReply::CopyFrom(const ImageWithAreaAndSrcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImageWithAreaAndSrcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageWithAreaAndSrcReply::IsInitialized() const {
  return true;
}

void ImageWithAreaAndSrcReply::InternalSwap(ImageWithAreaAndSrcReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageWithAreaAndSrcReply, _impl_.area_)
      + sizeof(ImageWithAreaAndSrcReply::_impl_.area_)
      - PROTOBUF_FIELD_OFFSET(ImageWithAreaAndSrcReply, _impl_.image_src_)>(
          reinterpret_cast<char*>(&_impl_.image_src_),
          reinterpret_cast<char*>(&other->_impl_.image_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageWithAreaAndSrcReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[15]);
}

// ===================================================================

class ImagesWithAreaReply_Data::_Internal {
 public:
  static const ::htpp::capture::service::v1::Image& image(const ImagesWithAreaReply_Data* msg);
};

const ::htpp::capture::service::v1::Image&
ImagesWithAreaReply_Data::_Internal::image(const ImagesWithAreaReply_Data* msg) {
  return *msg->_impl_.image_;
}
ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesWithAreaReply.Data)
}
ImagesWithAreaReply_Data::ImagesWithAreaReply_Data(const ImagesWithAreaReply_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesWithAreaReply_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , decltype(_impl_.pixels_){}
    , decltype(_impl_.area_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::htpp::capture::service::v1::Image(*from._impl_.image_);
  }
  ::memcpy(&_impl_.pixels_, &from._impl_.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.area_) -
    reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesWithAreaReply.Data)
}

inline void ImagesWithAreaReply_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , decltype(_impl_.pixels_){int64_t{0}}
    , decltype(_impl_.area_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesWithAreaReply_Data::~ImagesWithAreaReply_Data() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesWithAreaReply_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ImagesWithAreaReply_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesWithAreaReply_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  ::memset(&_impl_.pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.area_) -
      reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaReply_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2 [json_name = "pixels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3 [json_name = "area"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaReply_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  return target;
}

size_t ImagesWithAreaReply_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaReply_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesWithAreaReply_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaReply_Data::GetClassData() const { return &_class_data_; }


void ImagesWithAreaReply_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesWithAreaReply_Data*>(&to_msg);
  auto& from = static_cast<const ImagesWithAreaReply_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::htpp::capture::service::v1::Image::MergeFrom(
        from._internal_image());
  }
  if (from._internal_pixels() != 0) {
    _this->_internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaReply_Data::CopyFrom(const ImagesWithAreaReply_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesWithAreaReply.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaReply_Data::IsInitialized() const {
  return true;
}

void ImagesWithAreaReply_Data::InternalSwap(ImagesWithAreaReply_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagesWithAreaReply_Data, _impl_.area_)
      + sizeof(ImagesWithAreaReply_Data::_impl_.area_)
      - PROTOBUF_FIELD_OFFSET(ImagesWithAreaReply_Data, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaReply_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[16]);
}

// ===================================================================

class ImagesWithAreaReply::_Internal {
 public:
};

ImagesWithAreaReply::ImagesWithAreaReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesWithAreaReply)
}
ImagesWithAreaReply::ImagesWithAreaReply(const ImagesWithAreaReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesWithAreaReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesWithAreaReply)
}

inline void ImagesWithAreaReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesWithAreaReply::~ImagesWithAreaReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesWithAreaReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesWithAreaReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void ImagesWithAreaReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesWithAreaReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesWithAreaReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.capture.service.v1.ImagesWithAreaReply.Data data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesWithAreaReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImagesWithAreaReply.Data data = 1 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesWithAreaReply)
  return target;
}

size_t ImagesWithAreaReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesWithAreaReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImagesWithAreaReply.Data data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesWithAreaReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaReply::GetClassData() const { return &_class_data_; }


void ImagesWithAreaReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesWithAreaReply*>(&to_msg);
  auto& from = static_cast<const ImagesWithAreaReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesWithAreaReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaReply::CopyFrom(const ImagesWithAreaReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesWithAreaReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaReply::IsInitialized() const {
  return true;
}

void ImagesWithAreaReply::InternalSwap(ImagesWithAreaReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[17]);
}

// ===================================================================

class ImagesWithAreaAndSrcReply_Data::_Internal {
 public:
  static const ::htpp::capture::service::v1::ImageSrc& image_src(const ImagesWithAreaAndSrcReply_Data* msg);
};

const ::htpp::capture::service::v1::ImageSrc&
ImagesWithAreaAndSrcReply_Data::_Internal::image_src(const ImagesWithAreaAndSrcReply_Data* msg) {
  return *msg->_impl_.image_src_;
}
ImagesWithAreaAndSrcReply_Data::ImagesWithAreaAndSrcReply_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
}
ImagesWithAreaAndSrcReply_Data::ImagesWithAreaAndSrcReply_Data(const ImagesWithAreaAndSrcReply_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesWithAreaAndSrcReply_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , decltype(_impl_.pixels_){}
    , decltype(_impl_.area_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image_src()) {
    _this->_impl_.image_src_ = new ::htpp::capture::service::v1::ImageSrc(*from._impl_.image_src_);
  }
  ::memcpy(&_impl_.pixels_, &from._impl_.pixels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.area_) -
    reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
}

inline void ImagesWithAreaAndSrcReply_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_src_){nullptr}
    , decltype(_impl_.pixels_){int64_t{0}}
    , decltype(_impl_.area_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesWithAreaAndSrcReply_Data::~ImagesWithAreaAndSrcReply_Data() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesWithAreaAndSrcReply_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_src_;
}

void ImagesWithAreaAndSrcReply_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesWithAreaAndSrcReply_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_src_ != nullptr) {
    delete _impl_.image_src_;
  }
  _impl_.image_src_ = nullptr;
  ::memset(&_impl_.pixels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.area_) -
      reinterpret_cast<char*>(&_impl_.pixels_)) + sizeof(_impl_.area_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaAndSrcReply_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_src(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pixels = 2 [json_name = "pixels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double area = 3 [json_name = "area"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaAndSrcReply_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image_src(this),
        _Internal::image_src(this).GetCachedSize(), target, stream);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_pixels(), target);
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  return target;
}

size_t ImagesWithAreaAndSrcReply_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .htpp.capture.service.v1.ImageSrc image_src = 1 [json_name = "imageSrc"];
  if (this->_internal_has_image_src()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_src_);
  }

  // int64 pixels = 2 [json_name = "pixels"];
  if (this->_internal_pixels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pixels());
  }

  // double area = 3 [json_name = "area"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = this->_internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaAndSrcReply_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesWithAreaAndSrcReply_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaAndSrcReply_Data::GetClassData() const { return &_class_data_; }


void ImagesWithAreaAndSrcReply_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesWithAreaAndSrcReply_Data*>(&to_msg);
  auto& from = static_cast<const ImagesWithAreaAndSrcReply_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image_src()) {
    _this->_internal_mutable_image_src()->::htpp::capture::service::v1::ImageSrc::MergeFrom(
        from._internal_image_src());
  }
  if (from._internal_pixels() != 0) {
    _this->_internal_set_pixels(from._internal_pixels());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_area = from._internal_area();
  uint64_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaAndSrcReply_Data::CopyFrom(const ImagesWithAreaAndSrcReply_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaAndSrcReply_Data::IsInitialized() const {
  return true;
}

void ImagesWithAreaAndSrcReply_Data::InternalSwap(ImagesWithAreaAndSrcReply_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImagesWithAreaAndSrcReply_Data, _impl_.area_)
      + sizeof(ImagesWithAreaAndSrcReply_Data::_impl_.area_)
      - PROTOBUF_FIELD_OFFSET(ImagesWithAreaAndSrcReply_Data, _impl_.image_src_)>(
          reinterpret_cast<char*>(&_impl_.image_src_),
          reinterpret_cast<char*>(&other->_impl_.image_src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaAndSrcReply_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[18]);
}

// ===================================================================

class ImagesWithAreaAndSrcReply::_Internal {
 public:
};

ImagesWithAreaAndSrcReply::ImagesWithAreaAndSrcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
}
ImagesWithAreaAndSrcReply::ImagesWithAreaAndSrcReply(const ImagesWithAreaAndSrcReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImagesWithAreaAndSrcReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
}

inline void ImagesWithAreaAndSrcReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImagesWithAreaAndSrcReply::~ImagesWithAreaAndSrcReply() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImagesWithAreaAndSrcReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void ImagesWithAreaAndSrcReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImagesWithAreaAndSrcReply::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImagesWithAreaAndSrcReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImagesWithAreaAndSrcReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data data = 1 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  return target;
}

size_t ImagesWithAreaAndSrcReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .htpp.capture.service.v1.ImagesWithAreaAndSrcReply.Data data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImagesWithAreaAndSrcReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImagesWithAreaAndSrcReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImagesWithAreaAndSrcReply::GetClassData() const { return &_class_data_; }


void ImagesWithAreaAndSrcReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImagesWithAreaAndSrcReply*>(&to_msg);
  auto& from = static_cast<const ImagesWithAreaAndSrcReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImagesWithAreaAndSrcReply::CopyFrom(const ImagesWithAreaAndSrcReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImagesWithAreaAndSrcReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagesWithAreaAndSrcReply::IsInitialized() const {
  return true;
}

void ImagesWithAreaAndSrcReply::InternalSwap(ImagesWithAreaAndSrcReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagesWithAreaAndSrcReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[19]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.Image)
}

inline void Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }


void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Image*>(&to_msg);
  auto& from = static_cast<const Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[20]);
}

// ===================================================================

class ImageSrc::_Internal {
 public:
};

ImageSrc::ImageSrc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:htpp.capture.service.v1.ImageSrc)
}
ImageSrc::ImageSrc(const ImageSrc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageSrc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_){}
    , decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proc().empty()) {
    _this->_impl_.proc_.Set(from._internal_proc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src().empty()) {
    _this->_impl_.src_.Set(from._internal_src(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:htpp.capture.service.v1.ImageSrc)
}

inline void ImageSrc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_){}
    , decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageSrc::~ImageSrc() {
  // @@protoc_insertion_point(destructor:htpp.capture.service.v1.ImageSrc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageSrc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proc_.Destroy();
  _impl_.src_.Destroy();
}

void ImageSrc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageSrc::Clear() {
// @@protoc_insertion_point(message_clear_start:htpp.capture.service.v1.ImageSrc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proc_.ClearToEmpty();
  _impl_.src_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSrc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes proc = 1 [json_name = "proc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes src = 2 [json_name = "src"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageSrc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:htpp.capture.service.v1.ImageSrc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proc = 1 [json_name = "proc"];
  if (!this->_internal_proc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_proc(), target);
  }

  // bytes src = 2 [json_name = "src"];
  if (!this->_internal_src().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_src(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:htpp.capture.service.v1.ImageSrc)
  return target;
}

size_t ImageSrc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:htpp.capture.service.v1.ImageSrc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proc = 1 [json_name = "proc"];
  if (!this->_internal_proc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proc());
  }

  // bytes src = 2 [json_name = "src"];
  if (!this->_internal_src().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_src());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageSrc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageSrc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageSrc::GetClassData() const { return &_class_data_; }


void ImageSrc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageSrc*>(&to_msg);
  auto& from = static_cast<const ImageSrc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:htpp.capture.service.v1.ImageSrc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proc().empty()) {
    _this->_internal_set_proc(from._internal_proc());
  }
  if (!from._internal_src().empty()) {
    _this->_internal_set_src(from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageSrc::CopyFrom(const ImageSrc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:htpp.capture.service.v1.ImageSrc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSrc::IsInitialized() const {
  return true;
}

void ImageSrc::InternalSwap(ImageSrc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proc_, lhs_arena,
      &other->_impl_.proc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_, lhs_arena,
      &other->_impl_.src_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSrc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_getter, &descriptor_table_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto_once,
      file_level_metadata_apis_2fhtpp_2fcapture_2fservice_2fv1_2fcapture_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace service
}  // namespace capture
}  // namespace htpp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadOneRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadOneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadOneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadAllRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadOneWithBinaryRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadOneWithBinaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadOneWithBinaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadOneWithBinaryAndSrcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadAllWithBinaryRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadAllWithBinaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadAllWithBinaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadAllWithBinaryAndSrcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadOneWithBinaryAndCalAreaAndSrcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ReadAllWithBinaryAndCalAreaAndSrcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImageReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImageReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImageWithSrcReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImageWithSrcReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImageWithSrcReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesWithSrcReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesWithSrcReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesWithSrcReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImageWithAreaReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImageWithAreaReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImageWithAreaReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImageWithAreaAndSrcReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImageWithAreaAndSrcReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImageWithAreaAndSrcReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesWithAreaReply_Data*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesWithAreaReply_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesWithAreaReply_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesWithAreaReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesWithAreaReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesWithAreaReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImagesWithAreaAndSrcReply >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::Image*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::htpp::capture::service::v1::ImageSrc*
Arena::CreateMaybeMessage< ::htpp::capture::service::v1::ImageSrc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::htpp::capture::service::v1::ImageSrc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
